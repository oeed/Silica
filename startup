fs.open("log", "w").close()

local _print = print
function _G.print( ... )
	_print( ... )
	log(tostring(... or ""))
end

function _G.log( text )
	local h = fs.open("log", "a")
	h.write( tostring(text ) .. '\n')
	h.close()	
end

function _G.log2( text )
	local h = fs.open("log2", "a")
	h.write( tostring(text ) .. '\n')
	h.close()	
end

local _error = error
function _G.logtraceback( level )
	level = 2 + ( level or 1 )
	local traceback, trace, source, line = {}
	repeat
		traceback[#traceback + 1] = trace
		trace = select( 2, pcall( _error, "@", level ) ):match "^(.+) @"
		if trace and trace:find "^.+%.lua:%d+:$" then
			trace = trace:match "^(.+)%.lua:%d+:$" .. " on line " .. trace:match "^.+%.lua:(%d+):$"
		end
		level = level + 1
		if trace == "startup:55:" then
			break
		end
	until not trace
	log( "Start of traceback:\n" .. ("-"):rep( 20 ) .. "\nin " .. table.concat( traceback, "\nin ") .. "\n" .. ("-"):rep( 20 ) .. "\nEnd of traceback" )
end

-- if not fs.exists( "oeed" ) then
-- 	shell.run "NewRendering/test.lua"
-- 	read()
-- 	os.reboot()
-- 	do return end
-- end

-- os.loadAPI( 'src/debug' )
-- _G.debug = debug

term.redirect(term.native())

-- setmetatable( _G, {
--     __newindex = function( self, k, v )
--         rawset( self, k, v )
--         if k:sub(1,1):upper() ~= k:sub(1,1) then
--             print( "Set _G." .. k .. " to: " .. tostring( v ) )
--         end
--         -- logtraceback()
--     end
-- } )

if fs.exists("Silica.resourcepkg") then
    log("Using built package")
	local _, err = pcall(function() dofile( "Silica.resourcepkg" ) end)
    fs.delete("OldSilica.resourcepkg")
	fs.move("Silica.resourcepkg","OldSilica.resourcepkg")
	if err then error(err,2) end
else
    log("Using old style package")
	shell.run( "package /src Silica" )
	dofile( "Silica" )

    log("Building")
	local folder = Folder( "/src" )
	log(folder)
	local package = folder:package( "/Silica.resourcepkg", true, true )
	log("packaged!")
	os.reboot()
end


-- shell.run( "package /application app" )
-- 

-- the emulator only seems to want to draw after the first yield, so this just yields before we begin
os.queueEvent("damn_emulator")
os.pullEvent("damn_emulator")


-- dofile( "app" )
Application.static:load( "/testapplication" )

-- BitmapFont.convertFile( "font src/auckland", "src/fonts/Auckland.sfont", 32, 8, {
-- 	name = "Auckland";
-- 	author = "oeed";
-- 	version = 0.9;
-- 	fontType = "bitmap";
-- } )

-- -- this is essentially what the startup file will look like
-- ExampleApplication():run( ... )
-- Program functions...
-- FontStudioApplication():run( ... )
-- FilesApplication():run( ... )
TestApplication():run( ... )