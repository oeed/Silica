fs.open("log", "w").close()

local _print = print
function _G.print( ... )
	_print( ... )
	log(tostring(... or ""))
end

function _G.log( text )
	local h = fs.open("log", "a")
	h.write( tostring(text ) .. '\n')
	h.close()	
end

function _G.log2( text )
	local h = fs.open("log2", "a")
	h.write( tostring(text ) .. '\n')
	h.close()	
end

local _error = error
function _G.logtraceback( level )
	level = 2 + ( level or 1 )
	local traceback, trace, source, line = {}
	repeat
		traceback[#traceback + 1] = trace
		trace = select( 2, pcall( _error, "@", level ) ):match "^(.+) @"
		if trace and trace:find "^.+%.lua:%d+:$" then
			trace = trace:match "^(.+)%.lua:%d+:$" .. " on line " .. trace:match "^.+%.lua:(%d+):$"
		end
		level = level + 1
		if trace == "startup:55:" then
			break
		end
	until not trace
	log( "Start of traceback:\n" .. ("-"):rep( 20 ) .. "\nin " .. table.concat( traceback, "\nin ") .. "\n" .. ("-"):rep( 20 ) .. "\nEnd of traceback" )
end

function _G.error(m,l)
	term.setBackgroundColor(colors.red)
	term.clear()
	logtraceback( 2 )
	_error(m,l and (l == 0 and l or l + 1) or 2)
	while true do
		local event, key = os.pullEvent("char")
		if key == "\\" then
			os.reboot()
		end
	end
end

local g_tLuaKeywords = {
    [ "and" ] = true,
    [ "break" ] = true,
    [ "do" ] = true,
    [ "else" ] = true,
    [ "elseif" ] = true,
    [ "end" ] = true,
    [ "false" ] = true,
    [ "for" ] = true,
    [ "function" ] = true,
    [ "if" ] = true,
    [ "in" ] = true,
    [ "local" ] = true,
    [ "nil" ] = true,
    [ "not" ] = true,
    [ "or" ] = true,
    [ "repeat" ] = true,
    [ "return" ] = true,
    [ "then" ] = true,
    [ "true" ] = true,
    [ "until" ] = true,
    [ "while" ] = true,
}

local function serializeImpl( t, tTracking, sIndent )
    local sType = type(t)
    if sType == "table" then
        if tTracking[t] ~= nil then
            -- for k, v in pairs(t) do
                -- print(k)
            -- end
            -- logtraceback()
            -- error( "Cannot serialize table with recursive entries ", 0 )
            return "RECURSIVE"
        end
        tTracking[t] = true

        if next(t) == nil then
            -- Empty tables are simple
            return "{}"
        else
            -- Other tables take more work
            local sResult = "{\n"
            local sSubIndent = sIndent .. "  "
            local tSeen = {}
            for k,v in ipairs(t) do
                tSeen[k] = true
                sResult = sResult .. sSubIndent .. serializeImpl( v, tTracking, sSubIndent ) .. ",\n"
            end
            for k,v in pairs(t) do
                if not tSeen[k] then
                    local sEntry
                    if type(k) == "string" and not g_tLuaKeywords[k] and string.match( k, "^[%a_][%a%d_]*$" ) then
                        sEntry = k .. " = " .. serializeImpl( v, tTracking, sSubIndent ) .. ",\n"
                    else
                        sEntry = "[ " .. serializeImpl( k, tTracking, sSubIndent ) .. " ] = " .. serializeImpl( v, tTracking, sSubIndent ) .. ",\n"
                    end
                    sResult = sResult .. sSubIndent .. sEntry
                end
            end
            sResult = sResult .. sIndent .. "}"
            return sResult
        end
        
    elseif sType == "string" then
        return string.format( "%q", t )
    
    elseif sType == "number" or sType == "boolean" or sType == "nil" or sType == "function" then
        return tostring(t)
        
    else
        error( "Cannot serialize type "..sType, 0 )
        
    end
end

function _G.serialise( t )
    local tTracking = {}
    return serializeImpl( t, tTracking, "" )
end

-- if not fs.exists( "oeed" ) then
-- 	shell.run "NewRendering/test.lua"
-- 	read()
-- 	os.reboot()
-- 	do return end
-- end

-- os.loadAPI( 'src/debug' )
-- _G.debug = debug

term.redirect(term.native())

if fs.exists("Silica.resourcepkg") then
    log("Using built package")
	local _, err = pcall(function() dofile( "Silica.resourcepkg" ) end)
    fs.delete("OldSilica.resourcepkg")
	fs.move("Silica.resourcepkg","OldSilica.resourcepkg")
	if err then error(err,2) end
else
    log("Using old style package")
	shell.run( "package /src Silica" )
	dofile( "Silica" )

    log("Building")
	local folder = Folder( "/src" )
	log(folder)
	local package = folder:package( "/Silica.resourcepkg", true, true )
	log("packaged!")
	os.reboot()
end


-- shell.run( "package /application app" )
-- 

-- the emulator only seems to want to draw after the first yield, so this just yields before we begin
os.queueEvent("damn_emulator")
os.pullEvent("damn_emulator")


-- dofile( "app" )
Application.static:load( "/testapplication" )

-- BitmapFont.convertFile( "font src/auckland", "src/fonts/Auckland.sfont", 32, 8, {
-- 	name = "Auckland";
-- 	author = "oeed";
-- 	version = 0.9;
-- 	fontType = "bitmap";
-- } )

-- -- this is essentially what the startup file will look like
-- ExampleApplication():run( ... )
-- Program functions...
-- FontStudioApplication():run( ... )
-- FilesApplication():run( ... )
TestApplication():run( ... )