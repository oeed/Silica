
--[[

	Tab indent represents a layer of inheritance
	
	* is a class
	+ is a property
		[] names the object type (mainly for classes or where it's ambiguous)
		{} is a table
	- instance function
	= static function
		() lists the arguments
		! indicates that the function is not allowed to be called/intentionally errors (i.e. a setter on a read-only value)

	Maybe make this a checklist?
	prepend a # to a line that has been completed?

	Feel more than free to change this, in particuarlly naming convention wise

]]

--[[
-- moved this stuff to their respective files




-- Anything that handles events creates an EventManager.

-- In the main event loop:
while true do
	local event = Event.create( coroutine.yield() )

	-- trickling system
	[ContainerEventHandler]Application.container.event:handleEvent( event )

	EventManager.handleGlobals( event )
end
]]

-- Event system concept

-- first, anything that wants to recieve events creates an EventManager
-- in init (of, for example, View):
self.event = EventManager( self, false ) -- the boolean if whether it should use global by default with the :event constructor (see the next few lines)

-- then you connect a function to an event
self:event(Event.MOUSE_UP, self.onClick) -- a boolean an also be added like below. should this also toggle it? (i.e. if it's already connected, then disconnect, or should it just prevent duplicates)
-- which is actually just shorthand for:
self.event:connect(Event.MOUSE_UP, self.onClick, true) -- the boolean is whether it takes the event globally from the application, not trickle down (might be cleaner way) . so things like networking would be true as they recieve every event
	-- if it's not global, it will add { self, self.onClick } to self.event.handles[Event.MOUSE_UP]
	-- if it's global it will just do the above on the application's EventManager (instead of self.event, self.application.event)

-- disconnecting, simply doing the opposite of above
self.event:disconnect(Event.MOUSE_UP, self.onClick, true)

-- when the actual program runs
Main Event Loop
	[Event]event = Event( ... ) -- make the constructor take the details straight from os.pullEvent/Raw/yeild

	-- we could make the application EventManager a subclass and for EventManagers that want to always use global events (like networking cases) they still own their event handlers
	application.[EventManager]event:handleEvent( [Event]event )
	--  this is the definition of EventManager:handleEvent
	--	self referring to [EventManager]event
		for connection in self.connections[event.eventType] -- this needs to be ordered by some priority. it could maybe just be based on when it's inserted, or alternatively an optional third value in the { self, self.onClick } table inserted in to self.events
			-- connection[2] is the function, connection[1] is the "self" (from { self, self.onClick } mentioned above)
			if connection[2]( connection[1], event ) -- if the handler returns true it indicates that it's "stealing" the event (i.e. stop trickling it down or let anyone else have it)
				return true
	
		-- once all the global responders have done their thing start sending it down the responder chain
		-- a container EventManager is actually [ContainerEventManager]event (it's just initialised as ContainerEventManager() not EventManager( ) ) which is a subclass of EventManager
		-- this is so it can pass the event on to children if they hit test and in the correct order (i.e. top most first)
		event:makeRelative( application.container )
		application.container.event:handleEvent ( [Event]event ) -- send it to the root container
			-- this is the definition of ContainerEventManager:handleEvent
			if self.super:handleEvent( [Event]event ) -- does the same as above except with events registered on itself, if anything wants the event chain stopped it will return true
				return true

			for childView in self.owner.children
				if childView.event:hasConnections( [Events]event ) -- checks whether the view has any connections registered for the event
					if childView:hitTestEvent( [Event]event, self ) -- whether the event should be sent to the view. if it's a non-mouse event this is always true. if you don't want it to have to hit test you use the global mode when connecting
						event:makeRelative( childView )  -- make the event's coordinates relative to the child. the event's coordinates should already be relative to parent if we're avoiding absolute coordinates
						if childView:handleEvent( [Event]event )
							return true
						event:makeRelative( self.owner )  -- revert the coordinates back realative to the container


class
	+ [Application]application -- a reference to the program's application instance


	* Canvas -- draws on screen. handles size and drawing
		+ width
		+ height

		+ isVisible

		- set -- a value was set (maybe have a blacklist?), tell self it needs to be drawn

		-- CrazedProgrammer can decide how the drawing functions work really, although there naturally needs to be a function to invoke when a value changes and draw is needed, and then aso a function to call when the screen is drawn
		-- IMPORTANT: the function "draw" will be overridden by subclasses, so no logic can be placed in it by default. HOWEVER, the children will need to be drawn afterwards (without relying on super:draw( ) ), so we'll need to figure out the whole drawing proccess
		- draw () -- draw the view immediately (not checking if it's in queue or whatever, unless it's hidden or something)
		- needsDraw () -- tell the view that it needs to be drawn
		- tryDraw () -- check if the 

		-- and any other drawing functions, maybe a few drawPath helper methods
		-- these are assuming/praying that Dan actually adds the new higher density pixels (hence the single colour)
		- drawText ( x, y, width, height, text, [Font]font, colour) -- the width and height are for the font's alignment settings
		- drawLine ( x, y, width, height, thickness)
		- drawRectangle ( x, y, width, height, colour)
		- drawImage ( x, y, [Image]image, width, height) -- width and height are optional, be default they are taken from the [Image]
		- drawPath ( x, y, [Path]path, fillColour, outlineColour, outlineWidth )


		* View -- this basically handles the position, events and reltionships with parents
			+ x -- relative to parent
			+ y -- relative to parent
			+ parent
				- setParent -- move it to another parent, ensuring it's not self or a child view.

			+ siblings -- gets the siblings from parent

			- siblingsOfType( class ) -- gets the siblings that are of or inherit from the given class

			+ [EventManager]event -- used for subscribing functions to events

			-- we need to discuss exactly how position will work (especially with drawing as with this structure it doesn't know of it's parent or children)
			+ absolutePosition -- the position of the object relative to the entire screen
				- getAbsolutePosition
				- setAbsolutePosition -- set the position relative to the entire screen by altering the x and y relative to it's parent

			- getRelativePosition ( parent ) -- the position of an object relative to a parent
			- setRelativePosition ( parent )
			- hitTest ( x, y, parent ) -- performs a hit test relative to the supplied parents coordinate system, or if parent is nil using it's own (i.e in a rounded button doing circleButton:hitTest( 1, 1 ) would be false as the corner curves away before then)
			- hitTestEvent ( [Event]event, parent ) -- if the event is a mouse event it will run the self:hitTest using the correct coordinates. if it's not (e.g. rednet) it will always return true

			- animate ( [table]values, time, easingFunction, completion ) -- generates a new [Animation], and then does animation:animate()
			- move ( x, y, time, easingFunction, completion ) -- calls self:animate
			-- this naming needs a bit of thought. in Image scale these two both scale but resize sets the image to the scaled one, while scale returns it
			- scale ( width, height, time, easingFunction, completion ) -- scale the view down (for things like open animations) calls self:animate
			- resize ( width, height, time, easingFunction, completion ) -- change the size without scaling calls self:animate


			* Container -- handles relationships and holds children
				+ children {} -- this needs to be ordered based on the z-order of the children
				+ [ContainerEventManager]event -- used for subscribing functions to events

				- insert -- adds a subview. by default it is the top-most
				- removeChild

				* ApplicationContainer -- the container holding everything in the program. maybe call it root container instead?
					-- helper methods here, we'll figure out what they are once we decide how the programs will be structured


			-- we'll need to discuss how we name these things
			* Label
				+ text
					- setText -- if isAutoWidth set the width
				+ textColour
				+ fillColour
				+ [Font.alignment]alignment
				+ isAutoWidth -- not sure about this. I had it in Bedrock, it basically automatically set the width of the label to the size of the text if true
				+ isWrapped
				+ isEnabled

				- draw

			* Button
				+ text
					- setText -- if isAutoWidth set the width
				+ textColour
				+ fillColour
				+ activeTextColour
				+ activeFillColour
				+ disabledTextColour
				+ disabledFillColour
				+ [Font]font
				+ isAutoWidth -- see above
				+ isEnabled
				+ state -- need to decide how this will work

				- draw

				-- connected to the comment in Application, we need to decide how event handlers will work. do we go "onClick" or some other way

			* ProgressBar -- I want these to have a looped animation (if it looks okay and isn't too intensive), maybe like the barber wheel effect on OS X, and a indeterminate mode. what do you think, and what's the best way to do this? might need to make an addition to Animation to support this
				+ isEnabled
				+ fillColour
				+ barColour
				+ value
				+ maximum

				- draw


	* EventManager
		+ [class]owner -- the class who's event property is this event manager
		+ isGlobalDefault
		+ handles {} -- key based with tables for each event type

		- init( subject, isGlobalDefault)

		- mt._call( [Event.type]eventType, func, isGlobal ) -- see the explaination above, simply shorthand for connection
		- connect( [Event.type]eventType, func, isGlobal, subject ) -- subject is only sent if it's not the EventManager's subject (mainly connecting global events to [Application]application.event)
		- disconnect( [Event.type]eventType, func, isGlobal, subject ) -- simply the opposite of the above

		- handleEvent( [Event]event ) -- see the explaination at the top for it's implimentation and how it works
		- hasConnections( [Event]event ) -- returns true if self has any connections for the given event type


		* ContainerEventManager
			- handleEvent( [Event]event ) -- simply a custom implimentation (see the event system concept explanation)


	* Event
		+ x
		+ y
		+ globalX -- used when x and y have been converted to relative coordinates
		+ globalY
		+ mouseButton
		-- etc, etc

		+ eventType -- simply the default CC value for example, mouse_click


		+ MOUSE_UP = "mouse_up" -- constants for public use
		+ MOUSE_DOWN = "mouse_down"

		- init( ... ) -- makes an [Event] straight the values return from os.pullEvent, etc.
		
		- makeRelative( [View]view ) -- make the event's coordinates realative to this view




	* Animation
		+ subject
		+ time
		+ startingValues
		+ endValues
		+ easingFunction
		+ completion
		+ isAnimating

		+ easing {}
			= LINEAR
			= IN_QUAD
			= OUT_QUAD
			-- etc
														-- not string!
		- init ( subject, [table]values, time, [function]easingFunction, completion )

		- animate -- run the animation if not isAnimating (i.e. allow it to be reusable)
		-- all the other internal functions, fairly indifferent to how it operates internally


	* Font
		+ size  -- measured in pixel height of a capital letter
		+ family -- e.g. "Helvetica" (although we'll naturally need to make our own fonts)
		+ isBold
		+ isItalic
		+ isUnderlined
		+ characterPaths {
				"a" = { -- might be a better way to do this
					"normal" = [Path]...,
					"bold" = [Path]...,
					-- etc
				}
				"A" = ...
			}

		+ alignment {} -- not part of the font instance (like easing is to Animation), more of an enum really
			+ LEFT
			+ CENTRE
			+ CENTER -- synonym for centre
			+ RIGHT
			+ JUSTIFY


		= defaultFont ( size ) -- returns the default font in the given size (or default size)
		- init ( family, size, isBold, isItalic, isUnderlined )

		- characterPositions ( text, width, alignment ) -- essentially a helper function for drawing returning a table of the characters and their positions including wrapping and alignment (because they're not monospaced anymore!)
		- getWidth ( text ) -- the width of the supplied text
		- getHeight ( text ) -- the width of the supplied text
		-- another function to help with selection would probably super useful too. selection was a pain enough in Ink, let alone with non-monospace characters


	* Image -- a raster image, we could potentially make a subclass for vector images if the need arises
		+ data -- this needs to be essentially be the same universal format for all file formats (essentially whatever format we use for the buffer so it can be drawn the fastest)
		+ width
		+ height

		- init ( data ) -- by default make images straight from the buffer data (the imageWith... methods will first get the buffer data then call this)
		= imageWithHandle ( handle ) -- called by the next 3. detects and parses the image format. this naming convention is a rather Objective-C-ish. there might be a better naming system (although I'm not against it)
		= imageWithPath ( path )
		= imageWithURL ( url )
		= imageWithName ( name ) -- loads an image with the given name from the Silica resources folder

		- save ( path ) -- save using the default format (which we'll need to make as it's induvidual pixel based. given the amount of pixels i think two pixels should be combined in to one byte (two will fit) to save space)
		- saveNFT ( path )
		- saveNFP ( path )
		- saveNIM ( path )
		- saveSketch ( path )
		-- and any other formats

		- parse ( path ) -- parse the default format
		- parseNFT ( path )
		-- and the other formats

		- scale ( width, height ) -- returns a scaled version
		- resize ( width, height ) -- sets the image to the scaled down version

		- clip ( width, height, anchorPercentageX, anchorPercentageY) -- return cropped relative to a anchor points (i.e. 0.5, 0.5 would crop centrally), defaults to 0, 0 (top left)
		- crop ( width, height, anchorPercentageX, anchorPercentageY) -- once again, the previous function just returns the value, this sets the image to it

		-- ALL drawing code is to be done in View. this class is concerned about the actual data


	* Path -- do we want to use quadratic or cubic? quadratic are faster, although I'm not sure how much faster and how much lower the functionality is
		-- HTML5 canvas seems to be something reasonable to copy from: http://www.w3schools.com/tags/ref_canvas.asp
		+ points {
			{ x, y, c1x, c1y, c2x, c2y } -- to be honest I've got very little idea about how paths & bezier curves work internally. so unless someone else does reasearch will probably required
		}
		+ currentX -- set using moveTo, etc
		+ currentY
		+ height
			- getHeight
			- ! setHeight
		+ width
			- getWidth
			- ! setWidth

		- init ( points ) -- if points is nil it just makes an empty path
		= circle ( x, y, diameter )
		= ellipse ( x, y, diameterX, diameterY )
		= triangle ( x1, y1, x2, y2, x3, y3 )
		= rectangle ( x, y, width, height, radiusTopLeft/radius, radiusTopRight, radiusBottomRight, radiusBottomLeft ) -- defaults to regular rect, then rounded with rectangle with the same radius, then rounded rectangle with all radiuses defined
		-- and a few more

		- start -- not sure whether the path should be started by default
		- moveTo ( x, y ) 
		- lineTo ( x, y )
		- curveTo ( x, y, c1x, c1y, c2x, c2y )
		- arc ( mode, x, y, radius, angle1, angle2 )
		- arcTo -- something...
		- close

		- scale ( scaleX, scaleY ) -- as with image, returns a scaled verison
		- resize ( scaleX, scaleY ) -- sets the path to the scaled version

		-- could possibly have a better name
		- tilt ( degrees ) -- returns a rotated version. do we use degrees or radians? i'm personally far more comfortable with degrees as I've seldom used radians, but if they'll be beneficial then I'll learn.
		- rotates ( degrees ) -- sets to the rotated version

	-- startup would essentially just go MyApplicationSubclass( ):run( )
	* Application -- or Program? or something else? essentially the central control point/kernel for the program. core functionality should be here (like event handling, but other than that it should be as small as possible)
		+ name -- I'm thinking these would be defined in a subclass, rather than through a constructor
		+ path
		+ timers {}
		+ arguments {}
		+ isRunning

		+ [ApplicationContainer]container

		- run ( arguments ) -- or do we want it to run on init?
		- handleEvent ( ... ) -- we need to decide how this will actually run

		-- I'll leave this for now, we need to discuss how it will run. unlike most of the other stuff, most of the architectural decisions are very important
		-- I also want to discuss view loading. I strongly dispise of having to make the layout with code, IIRC you made an XML based way which might work
		+ [EventManager]event -- used for subscribing functions to events