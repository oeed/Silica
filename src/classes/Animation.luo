function copyTables(destination, keysTable, valuesTable)
	valuesTable = valuesTable or keysTable
	local mt = getmetatable( keysTable )
	if mt and getmetatable( destination ) == nil then
		setmetatable(destination, mt)
	end
	for k,v in pairs( keysTable ) do
		local value = valuesTable[k]
		if type( value ) == "table" then
			destination[k] = value[#value]
		else
			destination[k] = value
		end
	end
	return destination
end

function performEasingOnSubject(subject, targetValues, initialValues, time, duration, easingFunc, round)
	local t,b,c,d
	local progressPercentage, ceil, floor = false, math.ceil, math.floor
	for k,v in pairs( targetValues ) do
		if type( v ) == "table" then
			log('keyframe')
			-- Not sure what this for, I think keyframes would be more useful
			-- performEasingOnSubject(subject[k], v, initialValues[k], time, duration, easingFunc)

			-- Keyframe animation
			progressPercentage = progressPercentage or easingFunc( time, 0, 1, duration )
			local keyframe = progressPercentage * #v -- NOT an int, the progress through the keyframes. 0.5 is half way through the first keyframe

			-- if round is true the keyframes values are not tweened between, they are just set when over the threshhold. This is the best approach for colours
			if round then
				local value = v[ ceil( keyframe ) ]
				if subject[k] ~= value then
					subject[k] = value
				end
			else
				-- TODO: tweenning not tested
				local isInteger = ( keyframe % 1 == 0 )
				if isInteger then
					subject[k] = v[ floor( keyframe + 0.5) ]
				else
					local lowerKeyframe = floor( keyframe )
					local upperKeyframe = ceil( keyframe )
					local percentageUpper = keyframe - lowerKeyframe
					local lowerValue = v[ lowerKeyframe ]
					subject[k] = lowerValue + ( v[ upperKeyframe ] - lowerValue) * percentageUpper
				end
			end
		else
			b = initialValues[k]
			if not b then error( "No initial value for animation. Property name: " .. k ) end
			c = v - initialValues[k]
			if round then
				subject[k] = floor( easingFunc( time, b, c, duration ) + 0.5 )
			else
				subject[k] = easingFunc( time, b, c, duration )
			end
		end
	end
end

class Animation
	property Number duration
	property subject
	property targetValues -- if a targetValue is an array, not a single value, the values are used as evenly spaced 'keyframes'. This can be used for colours.
	property easingFunc
	property initialValues
	property Number time
	property Boolean round = false

	--[[
		@desc Creates an animation instance for internal use
		@param [number] duration -- the duration of the animation
		@param [class] subject -- the subject of the animation
		@param [class] targetValues -- the targetValues of the animation
		@param [Animation.easing] easingFunc -- the easing function of the animation
	]]
	function initialise( duration, subject, targetValues, easingFunc, round )
		self.duration = duration
		self.subject = subject
		self.targetValues = targetValues
		self.easingFunc = easingFunc
		self.round = round
		self.initialValues = copyTables( {}, targetValues, subject )
		self.time = 0
	end

	--[[
		@desc Sets the animation to the specificed time point
		@param [number] time -- the time point
		@return [boolean] isComplete -- whether the animation is complete
	]]
	function setTime( time )
		assert( type(time ) == "number" and time >= 0, "time must be a positive number or 0")

		local duration = self.duration

		if time <= 0 then
			self.time = 0
			copyTables(self.subject, self.initialValues)
		elseif time >= duration then -- the tween has expired
			self.time = duration
			copyTables(self.subject, self.targetValues)
		else
			self.time = time
			performEasingOnSubject(self.subject, self.targetValues, self.initialValues, self.time, duration, self.easingFunc, self.round)
		end

		return self.time >= duration
	end

	--[[
		@desc Resets the animation back to the start
		@return [boolean] isComplete -- whether the animation is complete
	]]
	function reset()
		return self:setTime( 0 )
	end

	--[[
		@desc Updates the animation given a change in time, returning true if the animation is complete
		@param [number] deltaTime -- the change in time since the last update
		@return [boolean] isComplete -- whether the animation is complete
	]]
	function update( deltaTime )
		return self:setTime( self.time + deltaTime )
	end

	-- easing functions --
	enum Function easings = {
		-- linear
		LINEAR = function( t, b, c, d )
			return c * t / d + b
		end;

		-- quad
		IN_QUAD = function( t, b, c, d )
			return c * pow(t / d, 2) + b
		end;

		OUT_QUAD = function( t, b, c, d )
			t = t / d
			return -c * t * (t - 2) + b
		end;

		IN_OUT_QUAD = function( t, b, c, d )
			t = t / d * 2
			if t < 1 then return c / 2 * pow(t, 2) + b end
			return -c / 2 * ((t - 1) * (t - 3) - 1) + b
		end;

		OUT_IN_QUAD = function( t, b, c, d )
			if t < d / 2 then return outQuad(t * 2, b, c / 2, d) end
			return inQuad((t * 2) - d, b + c / 2, c / 2, d)
		end;

		-- cubic
		IN_CUBIC = function ( t, b, c, d )
			return c * pow(t / d, 3) + b
		end;

		OUT_CUBIC = function( t, b, c, d )
			return c * (pow(t / d - 1, 3) + 1) + b
		end;

		IN_OUT_CUBIC = function( t, b, c, d )
			t = t / d * 2
			if t < 1 then return c / 2 * t * t * t + b end
			t = t - 2
			return c / 2 * (t * t * t + 2) + b
		end;

		OUT_IN_CUBIC = function( t, b, c, d )
			if t < d / 2 then return outCubic(t * 2, b, c / 2, d) end
			return inCubic((t * 2) - d, b + c / 2, c / 2, d)
		end;

		-- quart
		IN_QUART = function( t, b, c, d )
			return c * pow(t / d, 4) + b
		end;

		OUT_QUART = function( t, b, c, d )
			return -c * (pow(t / d - 1, 4) - 1) + b
		end;

		IN_OUT_QUART = function( t, b, c, d )
			t = t / d * 2
			if t < 1 then return c / 2 * pow(t, 4) + b end
			return -c / 2 * (pow(t - 2, 4) - 2) + b
		end;

		OUT_IN_QUART = function( t, b, c, d )
			if t < d / 2 then return outQuart(t * 2, b, c / 2, d) end
			return inQuart((t * 2) - d, b + c / 2, c / 2, d)
		end;

		-- quint
		IN_QUINT = function( t, b, c, d )
			return c * pow(t / d, 5) + b
		end;

		OUT_QUINT = function( t, b, c, d )
			return c * (pow(t / d - 1, 5) + 1) + b
		end;

		IN_OUT_QUINT = function( t, b, c, d )
			t = t / d * 2
			if t < 1 then return c / 2 * pow(t, 5) + b end
			return c / 2 * (pow(t - 2, 5) + 2) + b
		end;

		OUT_IN_QUINT = function( t, b, c, d )
			if t < d / 2 then return outQuint(t * 2, b, c / 2, d) end
			return inQuint((t * 2) - d, b + c / 2, c / 2, d)
		end;

		-- sine
		IN_SINE = function( t, b, c, d )
			return -c * cos(t / d * (pi / 2)) + c + b
		end;

		OUT_SINE = function( t, b, c, d )
			return c * sin(t / d * (pi / 2)) + b
		end;

		IN_OUT_SINE = function( t, b, c, d )
			return -c / 2 * (cos(pi * t / d) - 1) + b
		end;

		OUT_IN_SINE = function( t, b, c, d )
			if t < d / 2 then return outSine(t * 2, b, c / 2, d) end
			return inSine((t * 2) -d, b + c / 2, c / 2, d)
		end;

		-- expo
		IN_EXPO = function( t, b, c, d )
			if t == 0 then return b end
			return c * pow(2, 10 * (t / d - 1)) + b - c * 0.001
		end;

		OUT_EXPO = function( t, b, c, d )
			if t == d then return b + c end
			return c * 1.001 * (-pow(2, -10 * t / d) + 1) + b
		end;

		IN_OUT_EXPO = function( t, b, c, d )
			if t == 0 then return b end
			if t == d then return b + c end
			t = t / d * 2
			if t < 1 then return c / 2 * pow(2, 10 * (t - 1)) + b - c * 0.0005 end
			return c / 2 * 1.0005 * (-pow(2, -10 * (t - 1)) + 2) + b
		end;

		OUT_IN_EXPO = function( t, b, c, d )
			if t < d / 2 then return outExpo(t * 2, b, c / 2, d) end
			return inExpo((t * 2) - d, b + c / 2, c / 2, d)
		end;

		-- circ
		IN_CIRC = function( t, b, c, d )
			return(-c * (sqrt(1 - pow(t / d, 2)) - 1) + b)
		end;

		OUT_CIRC = function( t, b, c, d )
			return(c * sqrt(1 - pow(t / d - 1, 2)) + b)
		end;

		IN_OUT_CIRC = function( t, b, c, d )
			t = t / d * 2
			if t < 1 then return -c / 2 * (sqrt(1 - t * t) - 1) + b end
			t = t - 2
			return c / 2 * (sqrt(1 - t * t) + 1) + b
		end;

		OUT_IN_CIRC = function( t, b, c, d )
			if t < d / 2 then return outCirc(t * 2, b, c / 2, d) end
			return inCirc((t * 2) - d, b + c / 2, c / 2, d)
		end;

		-- elastic
		CALCULATE_P_A_S = function( p,a,c,d )
			p, a = p or d * 0.3, a or 0
			if a < abs( c ) then return p, c, p / 4 end -- p, a, s
			return p, a, p / (2 * pi) * asin( c/a ) -- p,a,s
		end;

		IN_ELASTIC = function( t, b, c, d, a, p )
			local s
			if t == 0 then return b end
			t = t / d
			if t == 1 then return b + c end
			p,a,s = calculatePAS( p,a,c,d )
			t = t - 1
			return -(a * pow(2, 10 * t) * sin((t * d - s) * (2 * pi) / p)) + b
		end;

		OUT_ELASTIC = function( t, b, c, d, a, p )
			local s
			if t == 0 then return b end
			t = t / d
			if t == 1 then return b + c end
			p,a,s = calculatePAS( p,a,c,d )
			return a * pow(2, -10 * t) * sin((t * d - s) * (2 * pi) / p) + c + b
		end;

		IN_OUT_ELASTIC = function( t, b, c, d, a, p )
			local s
			if t == 0 then return b end
			t = t / d * 2
			if t == 2 then return b + c end
			p,a,s = calculatePAS( p,a,c,d )
			t = t - 1
			if t < 0 then return -0.5 * (a * pow(2, 10 * t) * sin((t * d - s) * (2 * pi) / p)) + b end
			return a * pow(2, -10 * t) * sin((t * d - s) * (2 * pi) / p ) * 0.5 + c + b
		end;

		OUT_IN_ELASTIC = function( t, b, c, d, a, p )
			if t < d / 2 then return outElastic(t * 2, b, c / 2, d, a, p) end
			return inElastic((t * 2) - d, b + c / 2, c / 2, d, a, p)
		end;

		-- back
		IN_BACK = function( t, b, c, d, s )
			s = s or 1.70158
			t = t / d
			return c * t * t * ((s + 1) * t - s) + b
		end;

		OUT_BACK = function( t, b, c, d, s )
			s = s or 1.70158
			t = t / d - 1
			return c * (t * t * ((s + 1) * t + s) + 1) + b
		end;

		IN_OUT_BACK = function( t, b, c, d, s )
			s = (s or 1.70158) * 1.525
			t = t / d * 2
			if t < 1 then return c / 2 * (t * t * ((s + 1) * t - s)) + b end
			t = t - 2
			return c / 2 * (t * t * ((s + 1) * t + s) + 2) + b
		end;

		OUT_IN_BACK = function( t, b, c, d, s )
			if t < d / 2 then return outBack(t * 2, b, c / 2, d, s) end
			return inBack((t * 2) - d, b + c / 2, c / 2, d, s)
		end;

		-- bounce
		OUT_BOUNCE = function( t, b, c, d )
			t = t / d
			if t < 1 / 2.75 then return c * (7.5625 * t * t) + b end
			if t < 2 / 2.75 then
				t = t - (1.5 / 2.75)
				return c * (7.5625 * t * t + 0.75) + b
			elseif t < 2.5 / 2.75 then
				t = t - (2.25 / 2.75)
				return c * (7.5625 * t * t + 0.9375) + b
			end
			t = t - (2.625 / 2.75)
			return c * (7.5625 * t * t + 0.984375) + b
		end;

		IN_BOUNCE = function( t, b, c, d )
			return c - outBounce(d - t, 0, c, d) + b
		end;

		IN_OUT_BOUNCE = function( t, b, c, d )
			if t < d / 2 then return inBounce(t * 2, 0, c, d) * 0.5 + b end
			return outBounce(t * 2 - d, 0, c, d) * 0.5 + c * .5 + b
		end;

		OUT_IN_BOUNCE = function( t, b, c, d )
			if t < d / 2 then return outBounce(t * 2, b, c / 2, d) end
			return inBounce((t * 2) - d, b + c / 2, c / 2, d)
		end;
	}
end