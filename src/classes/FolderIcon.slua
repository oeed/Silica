
local folderFrontIcon, folderFrontOpenIcon, folderBackIcon, folderIcon, folderIconIcon
local VISIBLE_THUMBNAIL_COUNT, MINIMUM_SIZE = 3, 15
local THUMBNAIL_POSITION_X = 0.6
local THUMBNAIL_SCALE = 0.625

class FolderIcon extends Icon {
	
	folder = Folder;

}

function FolderIcon:initialise( Table images, Folder folder )
	self.folder = folder
	self:super( images )
end

function FolderIcon.static:fromFolder( Folder folder, Boolean( false ) isOpen )
	local files = folder.files
	local filesCount = #files
	if filesCount > 0 then
		-- if the folder has any *files* (i.e. not folders) directly within it then we'll use a custom icon
		if not folderBackIcon then
			folderBackIcon = Icon.static:fromName( "folder-back" )
		end
		if not folderFrontIcon and not isOpen then
			folderFrontIcon = Icon.static:fromName( "folder-front" )
		elseif not folderFrontOpenIcon and isOpen then
			folderFrontOpenIcon = Icon.static:fromName( "folder-front-open" )
		end
		local images = {}
		local thumbnailCount = math.min( filesCount, VISIBLE_THUMBNAIL_COUNT )
		local icons = {}
		for n = 1, thumbnailCount do
			icons[n] = files[n].icon
		end

		for i, _image in ipairs( folderBackIcon.images ) do
			local image = _image:copy()
			local width, height = image.width, image.height
			local size = math.max( width, height )
			if size >= MINIMUM_SIZE then
				local thumbnailSize = math.floor( size * THUMBNAIL_SCALE + 0.5 )
				for n = 1, thumbnailCount do
					local icon = icons[n]
					local iconPixels, iconWidth, iconHeight = icon:getScaledPixels( thumbnailSize )
					image:appendPixels( iconPixels, iconWidth, iconHeight, --[[math.floor( ( width - iconWidth ) / 2 + 0.5 )]]3 + (n - 1) * 4, 1 + (n - 1) * 3 )
				end
			end
			if isOpen then
				image:appendImage( folderFrontOpenIcon, 1, 1 )
			else
				image:appendImage( folderFrontIcon, 1, 1 )
			end
			images[i] = image
		end

		return FolderIcon( images, folder )
	else
		if isOpen then
			if not folderOpenIcon then
				folderOpenIcon = Icon.static:fromName( "folder-open" )
			end
			return folderOpenIcon
		else
			if not folderIcon then
				folderIcon = Icon.static:fromName( "folder" )
			end
			return folderIcon
		end
	end
end
