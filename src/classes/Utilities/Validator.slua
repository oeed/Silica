
-- validates and parses values (so BLUE becomes Graphics.colours.BLUE)
class Validator {
	
}

--[[
	@desc Parse a value to the given type
	@param value -- the value to parse
	@param [string] typeName -- the type to parse to
	@return parsedValue -- the parsed value
]]
function Validator.static:parse( value, typeName )
	-- TODO: make validator types dynamic
	if typeName == "Graphics.colours" then
		return Graphics.colours[value]
	elseif typeName == "Number" then
		return tonumber( value )
	elseif typeName == "String" then
		return tostring( value )
	elseif typeName == "Boolean" then
		value = value:lower()
		if value == "true" then
			return true
		elseif value == "false" then
			return false
		end
	elseif typeName == "Animation.easings" then
		return Animation.easings[value]
	elseif typeName == "Font" then
		return Font.static:fromName( value )
	elseif typeName == "Symbol" then
		return Symbol.static:fromName( value )
	elseif typeName == "Image" then
		return Image.static:fromName( value )
	else
		UnknownTypeValidationException( "Unknown validation type: '" .. typeName .. "'" )
	end
end

--[[
	@desc Validate a value against the given type
	@param value -- the value to validate
	@param [string] typeName -- the type to validate against
	@return [boolean] isValid -- whether the value is valid
]]
function Validator.static:isValid( value, typeName )
	return self:validatorType( value, typeName ) ~= nil
end
