class Validator
	-- validates and parses values (so BLUE becomes Graphics.colours.BLUE)
	
	--[[
		@desc Parse a value to the given type
		@param value -- the value to parse
		@param [string] typeName -- the type to parse to
		@return parsedValue -- the parsed value
	]]
	static function parse( value, typeName )
		-- TODO: make validator types dynamic
		if typeName:sub( #typeName - 9 ) == ".allowsNil" then
			if value == "nil" then
				return nil, true
			else
				typeName = typeName:sub( 1, #typeName - 10 )
			end
		end
		if typeName == "Graphics.colours" then
			return Graphics.colours[value]
		elseif typeName == "Number" then
			return tonumber( value )
		elseif typeName == "String" then
			return tostring( value )
		elseif typeName == "Boolean" then
			value = value:lower()
			if value == "true" then
				return true
			elseif value == "false" then
				return false
			end
		elseif typeName == "Animation.easings" then
			return Animation.easings[value]
		elseif typeName == "Font" then
			return Font.static:fromName( value )
		elseif typeName == "Symbol" then
			return Symbol.static:fromName( value )
		elseif typeName == "Image" then
			return Image.static:fromName( value )
		else
			UnknownTypeValidationException( "Unknown validation type: '" .. typeName .. "'" )
		end
	end

	--[[
		@desc Validate a value against the given type
		@param value -- the value to validate
		@param [string] typeName -- the type to validate against
		@return [boolean] isValid -- whether the value is valid
	]]
	static function isValid( value, typeName )
		local parsed, allowsNil = self:parse( value, typeName )
		return allowsNil or parsed ~= nil, parsed, allowsNil
	end

end