
local ucgValues = Image.ucgValues
local iconValues = {
	SIGNATURE = 0xFF2138;
	DEFAULT_WIDTH = 32;
	DEFAULT_HEIGHT = 32;
}

local mimes = Metadata.mimes
local ICON_MIMES = { mimes.SICON }
local availableMimes = {}
for i, v in ipairs( ICON_MIMES ) do
	availableMimes[v] = true
end
class Icon extends Image 

	property Table images
	property Enum iconValues = Number, iconValues


	function initialise( Table images, Any.allowsNil contents )
		local maxSize = 0
		local maxWidth, maxWidth
		local pixels
		for i, image in ipairs( images ) do
			local width, height = image.width, image.height
			local size = width * height
			if size > maxSize then
				maxSize = size
				pixels = image.pixels
				maxWidth = width
				maxHeight = height
			end
		end
		self.images = images
		super( pixels, maxWidth, maxHeight, contents )
	end

	set pixels( pixels )
		self.pixels = pixels
		
		local scaledCache, width, height = {}, self.width, self.height
		scaledCache[width .. ":" .. height] = { pixels, width, height };
		self.scaledCache = scaledCache
	end

	static function fromIcon( Table bytes )
		local pointer = 1 -- the index of the byte to read next
		local bitpointer = 1 -- the index of the bit to read next
		
		local bitcache = {}
		local function readByteRaw()
			local b = bytes[pointer]
			pointer = pointer +1
			if b == nil then
				error("unexpected end-of-stream "..pointer, 2)
			end
			return b
		end
		local function readBit()
			if bitcache[1] == nil then
				bitcache = {}
				local byte = readByteRaw()
				bitcache[1] = byte >= 128
				bitcache[2] = (byte % 128) >= 64
				bitcache[3] = (byte % 64) >= 32
				bitcache[4] = (byte % 32) >= 16
				bitcache[5] = (byte % 16) >= 8
				bitcache[6] = (byte % 8) >= 4
				bitcache[7] = (byte % 4) >= 2
				bitcache[8] = (byte % 2) >= 1
				bitpointer = 1
			end
			local b = bitcache[bitpointer]
			bitpointer = bitpointer +1
			if bitpointer > 8 then
				bitcache = {}
				bitpointer = 1
			end
			if b == false then
				return 0
			elseif b == true then
				return 1
			end
			return b
		end
		local function readBits( nbits )
			local t = {}
			for a = 1, nbits do
				t[a] = readBit()
			end
			return t
		end
		local function readNumber( nbits )
			nbits = math.floor( nbits )
			if nbits <= 0 then
				return
			elseif nbits == 1 then
				return readBit()
			else
				local n = 0
				for a = nbits - 1, 0, -1 do
					n = n + readBit() * 2^a
				end
				return n
			end
		end
		local function readByte()
			if bitpointer == 1 then
				return readByteRaw()
			else
				return readBit() * 128 + readBit() * 64 + readBit() * 32 + readBit() * 16 + readBit() * 8 + readBit() * 4 + readBit() * 2 + readBit()
			end
		end
		local function readWord()
			return readByte()  *  256 + readByte()
		end
		local function readInteger()
			return readByte() * 2^24 + readByte() * 2^16 + readByte() * 256 + readByte()
		end

		local images = {}
		if readNumber( 24 ) ~= iconValues.SIGNATURE then
			error( "invalid signature!", 2 )
		end
		local sizeCount = readByte()
		local startIndex = 6 + 4 * sizeCount
		for i = 1, sizeCount do
			local length = readInteger()
			local sizeBytes = {}
			for n = 1, length do
				sizeBytes[n] = readByte()
			end
			local image = Image.static:fromUniversalCompressedGraphics( sizeBytes )
			table.insert( images, image )
			startIndex = startIndex + length + 1 
		end
		return Icon( images, bytes )
	end

	--[[
		@desc Returns true if the given mime is a supported image
	]]
	static function isMIME( String.allowsNil mime )
		return mime and availableMimes[mime] or false
	end

	static function fromName( String name )
		local resource = Resource( name, ICON_MIMES )
		if resource then
			return Icon.static:fromResource( resource )
		end
	end
												-- TODO: needs to be Bundle
	static function fromNameInBundle( String name, Any bundle )
		return Icon.static:fromFile( bundle:file( name, ICON_MIMES ) )
	end

	static function fromFile( File file )
		if file.metadata.mime == mimes.SICON then
			return Icon.static:fromIcon( file.binaryContents )
		end
	end

	function getScaledPixels( Number maximumWidth, Number( maximumWidth ) maximumHeight, Image.scaleMethods( Image.scaleMethods.FIT ) method )
		size = math.floor( math.min( maximumWidth, maximumHeight ) + 0.5 )

		local scaledCache = self.scaledCache
		local cache = scaledCache[size]
		if cache then
			return cache[1], cache[2], cache[3]
		end

		local width, height, pixels = self.width, self.height, self.pixels

		local bestImage
		local bestDiff = math.huge
		for i, image in ipairs( self.images ) do
			local width, height = image.width, image.height
			local diff = math.abs( math.max( width, height ) - size )
			if diff < bestDiff then
				bestImage = image
				bestDiff = diff
			end
		end

		local pixels, pixelsWidth, pixelsHeight = bestImage:getScaledPixels( size, size, method )
		local n = 0
		for k, v in pairs(pixels) do
			n = n + 1
		end
		scaledCache[size] = { pixels, pixelsWidth, pixelsHeight }
		return pixels, pixelsWidth, pixelsHeight
	end

end