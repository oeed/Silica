
class Checkbox extends View 

	property Number width = 8
	property Number height = 8

	property Boolean isPressed = false
	property Boolean isEnabled = true
	property Boolean isChecked = false


	function initialise( ... )
		super( ... )
		self:event( MouseDownEvent, self.onMouseDown )
		self.event:connectGlobal( MouseUpEvent, self.onGlobalMouseUp, Event.phases.BEFORE )
	end

	function onDraw()
		local width, height, theme, canvas, isPressed = self.width, self.height, self.theme, self.canvas, self.isPressed

		-- background shape
		local roundedRectangle = RoundedRectangleMask( 1, 1, width, height, theme:value( "cornerRadius" ) )
		canvas:fill( theme:value( "fillColour" ), roundedRectangle )
		canvas:outline( theme:value( "outlineColour" ), roundedRectangle, theme:value( "outlineThickness" ) )
	--	TODO: checkbox check drawing
	--	   local checkObject = Path( 2, 2, self.width - 2, self.height - 2, 1, 4 )
	--	   checkObject:lineTo( 2, 5 )
	--	   checkObject:lineTo( 5, 2 )
	--	   checkObject:close( false )
	end

	function updateThemeStyle()
		self.theme.style = self.isEnabled and ( self.isPressed and "pressed" or (self.isChecked and "checked" or "default" ) ) or ( self.isChecked and "disabledChecked" or "disabled" )
	end

	set isPressed( isPressed )
		self.isPressed = isPressed
		self:updateThemeStyle()
	end

	set isEnabled( isEnabled )
		self.isEnabled = isEnabled
		self:updateThemeStyle()
	end

	set isChecked( isChecked )
		local wasChecked = self.isChecked
		if isChecked ~= wasChecked then
			self.isChecked = isChecked
			self:updateThemeStyle()
			self.event:handleEvent( ActionInterfaceEvent( self ) )
		end
	end

	--[[
		@desc Fired when the mouse is released anywhere on screen. Removes the pressed appearance. Sends the event to the local handler.
		@param [Event] event -- the mouse up event
		@return [boolean] preventPropagation -- prevent anyone else using the event
	]]
	function onGlobalMouseUp( MouseUpEvent event, Event.phases phase )	
		if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then
			self.isPressed = false
			if self.isEnabled then
				if self:hitTestEvent( event ) then
					self.isChecked = not self.isChecked
					return self.event:handleEvent( event )
				end
			end
		end
	end

	function onMouseDown( MouseDownEvent event, Event.phases phase )
		if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then
			self.isPressed = true
		end
		return true
	end

end