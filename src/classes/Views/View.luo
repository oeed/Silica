local MAX_DOUBLE_CLICK_TIME = 0.8
local MIN_MOUSE_HOLD_TIME = 0.3

local ANIMATION_DEFAULT_TIME = 0.3
local DEFAULT_EASING = Animation.easings.IN_OUT_SINE

local pins = {
	LEFT = "left",
	RIGHT = "right",
	TOP = "top",
	BOTTOM = "bottom",
}

class View

	property Number x = 1
	property Number y = 1
	property Number width = 1
	property Number height = 1
	property Number allowsNil index -- the z index in its parent
	property Container allowsNil parent
	property Table allowsNil siblings
	property String allowsNil identifier
	property Boolean allowsNil isFirst
	property Boolean allowsNil isLast -- TODO: .isReadOnly

	property Table animations = { names = {} }

	property EventManager eventManager

	property Canvas canvas
	property Mask allowsNil shadowMask -- TODO: .isReadOnly
	property Number shadowSize = 0
	property Boolean needsDraw = true
	property Boolean isVisible = true
	property ThemeOutlet theme
	property Table allowsNil interfaceProperties

	property Boolean isCanvasHitTested = false
	property Boolean isFocused = false
	property Boolean isSingleFocusOnly = false -- whether only this view can be in-focus when focused (i.e. so 3 textboxes aren't focused at the same time)
	property Boolean isFocusDismissable = true -- whether clicking away from the view when focused will unfocus it
	property Boolean isEnabled = true
	property Boolean isMouseInView = false -- whether the mouse if currently hovering over the View. NEVER change this, you'll screw stuff up
	property Cursor allowsNil cursor

	property Table specialMouseTimes = { timers = {}; up = {}; down = {}; }

	property String allowsNil leftPin
	property String allowsNil rightPin
	property String allowsNil topPin
	property String allowsNil bottomPin
	property Table parsedPins = {}
	enum String pins = pins

	--[[
		@constructor
		@desc Initialise a view instance
	]]
	function initialise( Table allowsNil properties )
		self:initialiseEventManager()
		self.theme = ThemeOutlet( self )
		self:initialiseCanvas()

		if properties then
			for k, v in pairs(properties) do
				self[k] = v
			end
		end

		local setPins = {
			[pins.LEFT] = self.leftPin;
			[pins.RIGHT] = self.rightPin;
			[pins.TOP] = self.topPin;
			[pins.BOTTOM] = self.bottomPin;
		}
		local parsedPins = self.parsedPins
		for k, v in pairs( setPins ) do
			parsedPins[k] = MathParser( v )
		end

		self:event( DownMouseEvent, self.onDownSpecialMouseEvents )
		self.eventManager:connectGlobal( UpMouseEvent, self.onGlobalUpSpecialMouseEvents )
	end

	--[[
		@desc Initialises the view's event manager (used for overriding)
	]]
	function initialiseEventManager()
		self.eventManager = EventManager( self )
	end

	--[[
		@desc Sets up the canvas and it's graphics objects (used for overriding)
	]]
	function initialiseCanvas()
		self.canvas = Canvas( self.width, self.height, self )
	end

	--[[
		@desc The Mask to use for the View's shadow
	]]
	get shadowMask()
		return self.canvas.contentMask -- self.canvas.mask is the mask of the currently drawn pixels to the canvas, i.e. everything will cast a shadow
	end

	set shadowSize( shadowSize )
		self.shadowSize = shadowSize
		self.needsDraw = true 
	end

	--[[
		@desc Called when a parent Container wants the Canvas to be redraw
	]]
	function draw()
		self.canvas:clear()
		self:onDraw() -- we have no children, just draw our own content
	end

	--[[
		@desc Called when the contents of the View's Canvas needs to be updated
	]]
	function onDraw()

	end

	set needsDraw( needsDraw )
		self.needsDraw = needsDraw
		if needsDraw then
			local parent = self.parent
			if parent then
				parent.needsDraw = needsDraw -- if we need to draw the parent also has to redraw
			end
		end
	end

	-- Location --

	--[[
		@desc Returns the view's siblings in it's container
		@return [table] siblings -- an array of the siblings
	]]
	get siblings()
		local siblings = {}

		if self.parent then
			for i, child in ipairs( self.parent.children ) do
				if child ~= self then
					siblings[#siblings + 1] = child
				end
			end
		end

		return siblings
	end

	--[[
		@desc Returns true if the view is the first child of it's parent
		@return [boolean] isFirst -- whether  the view is the first child of it's parent
	]]
	get isFirst()
		return self.index == 1
	end

	--[[
		@desc Returns true if the view is the last child of it's parent
		@return [boolean] isLast -- whether	 the view is the last child of it's parent
	]]
	get isLast()
		local parent = self.parent
		return parent and (self.index == #parent.children) or false
	end

	--[[
		@desc Returns whether the control is enabled, rising up to the parent containers as well
		@return [boolean] isEnabled -- whether the view is enabled
	]]
	get isEnabled()
		if not self.isEnabled then
			return false
		else
			local parent = self.parent
			if parent and not parent.isEnabled then
				return false
			else
				return true
			end
		end
	end

	--[[
		@desc Returns the index of the view in it's parent. 1 is the bottom most view
		@return [number] index -- an array of the siblings
	]]
	get index()
		local parent = self.parent
		if parent then
			for i, child in ipairs( parent.children ) do
				if child == self then
					return i
				end
			end
		end
		return 1
	end

	--[[
		@desc Sets the z index of the view in it's parent container
	]]
	set index( index )
		local parent = self.parent
		if parent then
			local containerChildren = parent.children
			index = math.max( math.min( index, #containerChildren), 1 )

			local currentIndex
			for i, child in ipairs( containerChildren ) do
				if child == self then
					currentIndex = i
					break
				end
			end

			if currentIndex ~= index then
				table.remove( containerChildren, currentIndex )
				table.insert( containerChildren, index, self )
			end
		end
	end

	--[[
		@desc Returns the view's siblings in it's container that are of or inherit from the given class
		@param [class] _class -- the class type
		@return [table] siblings -- an array of the siblings
	]]
	function siblingsOfType( _class )
		local siblings = {}

		for i, sibling in ipairs( self.siblings ) do
			if sibling:typeOf( _class ) then
				siblings[#siblings + 1] = sibling
			end
		end

		return siblings
	end

	set height( height )
		if self.height ~= height then
			self.height = height
			self.canvas.height = height
			self.needsDraw = true
			local parent = self.parent
			if parent then
				if not self.bottomPin then
					local selfReferences = parent.childPins.references[self]
					if selfReferences and selfReferences[pins.BOTTOM] then
						parent.needsVerticalPinUpdate = true
					end
				end
				parent.event:handleEvent( ChildRepositionedInterfaceEvent( self ) )
			end
		end
	end

	set width( width )
		if self.width ~= width then
			self.width = width
			self.canvas.width = width
			self.needsDraw = true
			local parent = self.parent
			if parent then
				if not self.rightPin then
					local selfReferences = parent.childPins.references[self]
					if selfReferences and selfReferences[pins.RIGHT] then
						parent.needsHorizontalPinUpdate = true
					end
				end
				parent.event:handleEvent( ChildRepositionedInterfaceEvent( self ) )
			end
		end
	end

	set x( x )
		if self.x ~= x then
			self.x = x
			local parent = self.parent
			if parent then
				if not self.leftPin then
					local selfReferences = parent.childPins.references[self]
					if selfReferences and ( selfReferences[pins.LEFT] or selfReferences[pins.RIGHT] ) then
						parent.needsHorizontalPinUpdate = true
					end
				end
				parent.needsDraw = true
				parent.event:handleEvent( ChildRepositionedInterfaceEvent( self ) )
			end
		end
	end

	set y( y )
		if self.y ~= y then
			self.y = y
			local parent = self.parent
			if parent then
				if not self.topPin then
					local selfReferences = parent.childPins.references[self]
					if selfReferences and ( selfReferences[pins.TOP] or selfReferences[pins.BOTTOM] ) then
						parent.needsVerticalPinUpdate = true
					end
				end
				parent.needsDraw = true
				parent.event:handleEvent( ChildRepositionedInterfaceEvent( self ) )
			end
		end
	end

	get isVisible()
		return self.parent and self.isVisible -- if we don't have a parent we're effectively not visible
	end

	set isVisible( isVisible )
		self.isVisible = isVisible
		local parent = self.parent
		if parent then
			self.parent.needsDraw = true
		end
	end

	--[[
		@desc Converts the local coordinates to local coordinates of a parent (or global if nil) to.
		@return Number x -- the x coordinate in the parent's coordinate system
		@return Number y -- the x coordinate in the parent's coordinate system
	]]
	--									TODO: Any should be Container. If it is it loads another View class, so there are two different ones
	function getCoordinatesTo( Number x, Number y, Any parent = self.application.container )
		local currentParrent = { parent = self }
		while currentParrent.parent and currentParrent.parent ~= parent do
			currentParrent = currentParrent.parent
			x = x + currentParrent.x - 1
			y = y + currentParrent.y - 1
		end
		return x, y
	end

	--[[
		@desc Converts the position of the view to the coordinates in a parent (or global if nil)
		@param [View] parent -- the parent to convert to
		@return [number] x -- the x coordinate in the parent's coordinate system
		@return [number] y -- the x coordinate in the parent's coordinate system
	]]
	--					TODO: Any should be Container. If it is it loads another View class, so there are two different ones
	function getPosition( Any parent = self.application.container )
		local selfParent = self.parent
		if not selfParent or parent == selfParent then
			return self.x, self.y
		else
			local x, y = self:getCoordinatesTo( 1, 1, parent )
			return x, y
		end
	end

	--[[
		@desc Converts the coordinates of a parent (or global if nil) to local coordinates.
		@return [number] x -- the local x coordinate
		@return [number] y -- the local x coordinate
	]]
	--							TODO: Any should be Container. If it is it loads another View class, so there are two different ones
	function getCoordinates( Number x, Number y, Any parent = self.application.container )
		local currentParrent = self
		while currentParrent and currentParrent ~= parent do
			x = x - currentParrent.x + 1
			y = y - currentParrent.y + 1
			currentParrent = currentParrent.parent
		end

		return x, y
	end

	--[[
		@desc Hit test the view realative to its parent's coordinates
		@param [number] x -- the x coordinate to hit test
		@param [number] y -- the y coorindate to hit test
		@return [boolean] isHit -- whether the hit test hit
	]]
	function hitTest( Number x, Number y )
		local _x, _y = self.x, self.y
		return self.isVisible and _x <= x
		   and x <= _x + self.width - 1
		   and _y <= y and y <= _y + self.height - 1
		   and ( not self.isCanvasHitTested or self.canvas:hitTest( x - _x + 1, y - _y + 1 ) )
	end

	--[[
		@desc Hit tests the view with an event relative to the parent, uses the coordinates if it's a MouseEvent, otherwise it will always return true
		@param [Event] event -- the event
		@param [View] parent -- the parent
		@return [boolean] isHit -- whether the hit test hit
	]]
	--							TODO: Any should be Container. If it is it loads another View class, so there are two different ones
	function hitTestEvent( Event event, Any parent = self.parent )
		if not parent then
			return false
		elseif event:typeOf( MouseEvent ) then
			event:makeRelative( parent )
			local x, y = event.x, event.y
			return self:hitTest( x, y )
		else
			return true
		end
	end

	--[[
		@desc Update the animation
		@param [number] deltaTime -- time since last update
	]]
	function update( dt )
		local animations = self.animations
		for i = #animations, 1, -1 do
			local animation = animations[i]
			animation.animation:update( dt )
			if animation.animation.time >= animation.animation.duration then
				table.remove( animations, i )
				if animation.onFinish then
					animation.onFinish( self )
				end
			end
		end
	end

	--[[
		@desc Animate a change in a certain property
	]]
	function animate( String propertyName, Number value, Number time = ANIMATION_DEFAULT_TIME, Function allowsNil onFinish, Animation.easings easing = DEFAULT_EASING, Number delay = 0, Boolean round = true )
		-- if the value hasn't changed then just call the callback and return
		if self[propertyName] == value then
			if onFinish then
				onFinish( self )
			end
			return
		end

		local addAnimation = function()
			local animations = self.animations
			for i = #animations, 1, -1 do
				if animations[i].label == propertyName then
					table.remove( animations, i )
				end
			end
			
			local animation = Animation( time, self, { [propertyName] = value }, easing, round )
			animations[#animations + 1] = { label = propertyName, animation = animation, onFinish = onFinish }
		end

		if delay <= 0 then
			addAnimation()
		else
			self.application:schedule( addAnimation, delay )
		end
	end

	--[[
		@desc Animate a change in the position
	]]
	function animateMove(	Number x, Number y, Number time = ANIMATION_DEFAULT_TIME, Function allowsNil onFinish, Animation.easings easing = DEFAULT_EASING, Number delay = 0 )
		self:animate( "x", x, time, onFinish, easing, delay )
		self:animate( "y", y, time, nil, easing, delay )
	end

	--[[
		@desc Animate a change in the size
	]]
	function animateResize( Number width, Number height, Number time = ANIMATION_DEFAULT_TIME, Function allowsNil onFinish, Animation.easings easing = DEFAULT_EASING, Number delay = 0 )
		self:animate( "width", width, time, onFinish, easing, delay )
		self:animate( "height", height, time, nil, easing, delay )
	end

	--[[
		@desc Detects when the mouse is pressed. Used to fire mouse held and double click
	]]
	function onDownSpecialMouseEvents( DownMouseEvent event, Event.phases phase )
		local eventManager = self.eventManager
		local hasHeld, hasDouble = eventManager:hasConnections( HeldMouseEvent ), eventManager:hasConnections( DoubleClickMouseEvent )
		if hasHeld or hasDouble then
			local mouseButton, time = event.mouseButton, os.clock()
			local specialMouseTimes = self.specialMouseTimes
			local down, timers = specialMouseTimes.down, specialMouseTimes.timers
			local lastMouseDown = down[mouseButton]
			down[mouseButton] = time

			if hasDouble then
				if lastMouseDown and time - lastMouseDown < MAX_DOUBLE_CLICK_TIME then
					-- double click
					if eventManager:handleEvent( DoubleClickMouseEvent( mouseButton, event.x, event.y, event.globalX, event.globalY ) ) then
						return true
					end
				end
			end
				
			-- start a held timer
			if hasHeld then
				local application = self.application 
				local timer = timers[mouseButton]
				if timer then
					application:unschedule( timer )
				end

				local x, y, globalX, globalY = event.x, event.y, event.globalX, event.globalY
				timer = application:schedule( function()
					timers[mouseButton] = nil
					local lastMouseUp = specialMouseTimes.up[mouseButton]
					if not lastMouseUp or lastMouseUp < time then
						if eventManager:handleEvent( HeldMouseEvent( mouseButton, x, y, globalX, globalY ) ) then
							return true
						end
					end
				end, MIN_MOUSE_HOLD_TIME )
				timers[mouseButton] = timer
			end
		end
	end

	--[[
		@desc Detects when the mouse is released. Used to fire mouse held and double click
	]]
	function onGlobalUpSpecialMouseEvents( UpMouseEvent event, Event.phases phase )
		self.specialMouseTimes.up[event.mouseButton] = os.clock()
	end

	--[[
		@desc Starts a drag and drop for the view
	]]
	function startDragDrop( MouseEvent event, ClipboardData data, Boolean hideSource = true, Function allowsNil completion, Table allowsNil views )
		self.application.dragDropManager:start( views or { self }, data, event.globalX, event.globalY, hideSource, completion )
	end

	set isFocused( isFocused )
		local wasFocused = self.isFocused
		if wasFocused ~= isFocused then
			self.isFocused = isFocused
			if self:isDefinedfunction( "updateThemeStyle" ) then
				self:updateThemeStyle()
			end
		end
	end

	function focus( filter )
		self.application:focus( self, filter )
	end

	function addFocus()
		self.application:addFocus( self )
	end

	function unfocus()
		self.application:unfocus( self )
	end

	function clearFocus( filter )
		self.application:clearFocus( filter )
	end

	set leftPin( leftPin )
	    self.leftPin = leftPin
	    if leftPin then
		    local parsed = MathParser( leftPin )
		    self.parsedPins[pins.LEFT] = parsed
		    local parent = self.parent
		    if parent then
		    	local childPinTable = parent.childPins[self]
		    	if childPinTable then
		    		childPinTable[pins.LEFT] = parsed
		    	end
		    	parent.needsHorizontalPinUpdate = true
		    end
		end
	end

	set rightPin( rightPin )
	    self.rightPin = rightPin
	    if rightPin then
		    local parsed = MathParser( rightPin )
		    self.parsedPins[pins.RIGHT] = parsed
		    local parent = self.parent
		    if parent then
		    	local childPinTable = parent.childPins[self]
		    	if childPinTable then
		    		childPinTable[pins.RIGHT] = parsed
		    	end
		    	parent.needsHorizontalPinUpdate = true
		    end
		end
	end

	set topPin( topPin )
	    self.topPin = topPin
	    if topPin then
		    local parsed = MathParser( topPin )
		    self.parsedPins[pins.TOP] = parsed
		    local parent = self.parent
		    if parent then
		    	local childPinTable = parent.childPins[self]
		    	if childPinTable then
		    		childPinTable[pins.TOP] = parsed
		    	end
		    	parent.needsVerticalPinUpdate = true
		    end
		end
	end

	set bottomPin( bottomPin )
	    self.bottomPin = bottomPin
	    if bottomPin then
		    local parsed = MathParser( bottomPin )
		    self.parsedPins[pins.BOTTOM] = parsed
		    local parent = self.parent
		    if parent then
		    	local childPinTable = parent.childPins[self]
		    	if childPinTable then
		    		childPinTable[pins.BOTTOM] = parsed
		    	end
		    	parent.needsVerticalPinUpdate = true
		    end
		end
	end

	-- IMPORTANT: You MUST ALWAYS call super when overriding this function
	function dispose()
		self.eventManager:dispose()

		local parent = self.parent
		if parent then
			parent:remove( self )
		end

		if self.isFocused then
			self:unfocus()
		end
	end

end