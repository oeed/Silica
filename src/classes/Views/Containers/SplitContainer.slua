
class SplitContainer extends Container {
    
    needsLayoutUpdate = Boolean( false );
    isVertical = Boolean( true );

}

function SplitContainer:initialise( ... )
    self:super( ... )
    self:event( ReadyInterfaceEvent, self.onReady )
    self:event( ChildAddedInterfaceEvent, self.onChildAdded )
    self:event( ChildRemovedInterfaceEvent, self.onChildRemoved )
end

function SplitContainer:onReady( ReadyInterfaceEvent event, Event.phases phase )
    self:updateLayout( true )
    self:animate( "y", 1, 0.6, nil, Animation.easings.OUT_QUART, 0.5 )
end

function SplitContainer:updateLayout( dontAnimate )
    local children, width = self.children, self.width
    local childrenCount = #children
    local remainingWidth = width + 1 -- add one to hide the last separator between the left and right pinned items
    local leftX, rightX = 1, -1
    local dynamicItems = {}
    local activeIndex
    local activeView, separatorView = self.activeView, self.separatorView

    local function updateFrame( childView, x, width )
        local isVisible = dontAnimate and true or childView.isVisible

        local separatorX, separatorWidth = x + (pin == pins.RIGHT and 1 or 0), width - 1
        if dontAnimate or not isVisible then
            childView.x = x
            childView.width = width
            if not isVisible then
                childView:animate( "y", 1, ANIMATION_TIME, function() childView.isSeparatorVisible = true end, Animation.easings.IN_SINE )
                childView.isVisible = true
            end
        else
            childView:animate( "x", x, ANIMATION_TIME, nil, ANIMATION_EASING )
            childView:animate( "width", width, ANIMATION_TIME, nil, ANIMATION_EASING )
        end
        if childView == activeView then
            separatorView:animate( "activeX", separatorX, ANIMATION_TIME, nil, ANIMATION_EASING )
            separatorView:animate( "activeWidth", separatorWidth, ANIMATION_TIME, nil, ANIMATION_EASING )
        end
    end

    for i, childView in ipairs( self.children ) do
        if not childView:typeOf( SeparatorView ) and not childView.isRemoving then
            local pin, size = childView.pin, childView.size
            if size then
                if pin == pins.LEFT then
                    updateFrame( childView, leftX, size )
                    remainingWidth = remainingWidth - size
                    leftX = leftX + size
                elseif pin == pins.RIGHT then
                    rightX = rightX + size
                    updateFrame( childView, width - rightX, size )
                    remainingWidth = remainingWidth - size
                end
            else
                if not activeIndex and childView.isActive then
                    activeIndex = #dynamicItems + 1
                end
                table.insert( dynamicItems, childView )
            end
        end
    end

    activeIndex = activeIndex or 1

    local itemCount = #dynamicItems
    if itemCount > 0 then
        local eachWidthDecimal = remainingWidth / itemCount
        local standardWidth = math.ceil( eachWidthDecimal )
        local activeWidth = remainingWidth - (itemCount - 1) * standardWidth

        for i, childView in ipairs( dynamicItems) do
            local size = activeIndex == i and activeWidth or standardWidth
            updateFrame( childView, leftX, size )
            leftX = leftX + size
        end
    end

    self.needsLayoutUpdate = false
end

function SplitContainer:update( deltaTime )
    self:super( deltaTime )
    if self.needsLayoutUpdate then
        self:updateLayout()
    end
end

function SplitContainer:onChildAdded( ChildAddedInterfaceEvent event, Event.phases phase )
    local childView = event.childView
    if not childView:typeOf( SplitHandleView ) then
        childView.y = self.height + 1
        childView.isVisible = false
        childView.isSeparatorVisible = false
        childView.isRemoving = false
    else
        self.needsLayoutUpdate = true
    end

    self:sendToFront( self.separatorView )
end

function SplitContainer:onChildRemoved( ChildRemovedInterfaceEvent event, Event.phases phase )
    self.needsLayoutUpdate = true
end

function SplitContainer:onFocusesChanged( FocusesChangedInterfaceEvent event, Event.phases phase )
    local oldFocusedSwitchableViews = self.application:focusesOfType( ISwitchableView, event.oldFocuses )
    local focusedSwitchableViews = self.application:focusesOfType( ISwitchableView, event.newFocuses )

    if #focusedSwitchableViews > 0 then
        local oldSwitchableView = oldFocusedSwitchableViews[1]
        local switchableView = focusedSwitchableViews[1]
        if switchableView ~= oldSwitchableView then
            if oldSwitchableView then
                self.switchableItems[oldSwitchableView]:updateThemeStyle()
            end
            self.activeView = self.switchableItems[switchableView]
        end
    else
        self.activeView = nil
    end
end
