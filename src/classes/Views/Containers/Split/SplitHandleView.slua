
class SplitHandleView extends View {

	position = Number( 1 );
	contentPosition = Number.allowsNil;
	isVertical = Boolean;

	isDragging = Boolean( false );
	dragX = Number.allowsNil;
	dragY = Number.allowsNil;

}

function SplitHandleView:initialise( ... )
	self:super( ... )

	self:event( MouseDownEvent, self.onMouseDown, Event.phases.AFTER )
	self.event:connectGlobal( MouseDragEvent, self.onGlobalMouseDrag )
	self.event:connectGlobal( MouseUpEvent, self.onGlobalMouseUp, Event.phases.BEFORE )
end

function SplitHandleView:onDraw()
	self.canvas:fill( self.theme:value( "fillColour" ) )
end

function SplitHandleView:onMouseDown( MouseDownEvent event, Event.phases phase )
	if event.mouseButton == MouseEvent.mouseButtons.LEFT then
		self.dragX = event.x
		self.dragY = event.y
		self.isDragging = true
	end
	return true
end

function SplitHandleView.position:set( position )
	self.position = position
	local parent = self.parent
	if parent then
		parent.needsLayoutUpdate = true
	end
end

function SplitHandleView:onGlobalMouseDrag( MouseDragEvent event, Event.phases phase )
	if self.isDragging and event.mouseButton == MouseEvent.mouseButtons.LEFT then
		local segmentSize, contentPosition = self.parent.segmentSize, self.contentPosition
		local width = event.x - self.dragX + 1 - contentPosition + self.theme:value( "leftMargin" )
		self.position = width / segmentSize
		return true
	end
end

function SplitHandleView:onGlobalMouseUp( MouseUpEvent event, Event.phases phase )
	if self.isDragging and event.mouseButton == MouseEvent.mouseButtons.LEFT then
		self.dragX = nil
		self.dragY = nil
		self.isDragging = false
		return true
	end
end
