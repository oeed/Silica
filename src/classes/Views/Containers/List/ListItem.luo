
class ListItem extends View implements IDraggableView 
	
	property Number height = 12
	property Boolean isSelected = false

	property String text
	property Cursor allowsNil cursor = ClickableCursor.static


	function initialise( ... )
		super( ... )

		self:event( MouseDownEvent, self.onMouseDown )
		self.event:connectGlobal( MouseUpEvent, self.onGlobalMouseUp, Event.phases.BEFORE )
		self:event( MouseHeldEvent, self.onMouseHeld )
	end

	function onDraw()
		local width, height, theme, canvas, font = self.width, self.height, self.theme, self.canvas

		local leftMargin, rightMargin, topMargin, bottomMargin = theme:value( "leftMargin" ), theme:value( "rightMargin" ), theme:value( "topMargin" ), theme:value( "bottomMargin" )
		local roundedRectangleMask = RoundedRectangleMask( 1 + leftMargin, 1 + topMargin, width - leftMargin - rightMargin, height - topMargin - bottomMargin, theme:value( "cornerRadius" ) )
		canvas:fill( theme:value( "fillColour" ), roundedRectangleMask )

		local leftTextMargin, rightTextMargin, topTextMargin, bottomTextMargin = theme:value( "leftTextMargin" ), theme:value( "rightTextMargin" ), theme:value( "topTextMargin" ), theme:value( "bottomTextMargin" )
		canvas:fill( theme:value( "textColour" ),  TextMask( leftTextMargin + 1, topTextMargin + 1, width - leftTextMargin - rightTextMargin, height - topTextMargin - bottomTextMargin, self.text, theme:value( "font" ) ) )
	end

	set text( text )
		self.text = text
		self.needsDraw = true
	end

	function updateThemeStyle()
		self.theme.style = self.isEnabled and ( self.isSelected and "selected" or "default" ) or "disabled"
	end

	set isEnabled( isEnabled )
		self.isEnabled = isEnabled
		self:updateThemeStyle()
	end

	set isSelected( isSelected )
		self.isSelected = isSelected
		self:updateThemeStyle()
	end

	function onMouseHeld( MouseHeldEvent event, Event.phases phase )
		if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT and self.parent.canRearrange then
			self.isSelected = true
			self:startDragDrop( event, ListClipboardData( self ), true, function()self.isSelected = false end )
		end
		return true
	end

	function onGlobalMouseUp( MouseUpEvent event, Event.phases phase )
		if self.isSelected and event.mouseButton == MouseEvent.mouseButtons.LEFT then
			self.isSelected = false
			if self.isEnabled and self:hitTestEvent( event ) then
				self.event:handleEvent( ActionInterfaceEvent( self ) )
				local result = self.event:handleEvent( event )
				return result == nil and true or result
			end
			return true
		end
	end

	function onMouseDown( MouseDownEvent event, Event.phases phase )
		if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then
			self.isSelected = not self.isSelected
		end
		return true
	end

	function dragDropCancelled( ClipboardData data, DragView dragView, Number x, Number y )
	end

end