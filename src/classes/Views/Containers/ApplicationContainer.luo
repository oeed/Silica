local w, h = term.getSize()

class ApplicationContainer extends Container 

	-- TODO: make this use a Constraint
	property Number width = w
	property Number height = h
	property String themeName = "default"

	property Number cursorX = 6
	property Number cursorY = 6
	property Boolean needsCursorUpdate = true
	property ScreenCanvas allowsNil screenCanvas


	--[[
		@constructor
		@desc Initialise a application container instance
		@param [table] properties -- the properties for the view
	]]
	function initialise( ... )
		super( ... )
		self:event( DownMouseEvent, self.onMouseDownAfter, Event.phases.AFTER )
		self:event( MoveMouseEvent, self.onMouseMoveCursorBefore )
	end

	function initialiseCanvas()
		if Quartz then
			self.canvas = ScreenCanvas( self.width, self.height, self )
		else
			super()
			self.screenCanvas = ScreenCanvas( self.width, self.height, self )
		end
	end

	set theme( theme )
		if type( theme ) == "string" then error( "To the set the theme of an ApplicationContainer using a string, use the property 'themeName', rather than 'theme'. Most likely cause: you have use theme=\"" .. theme .. "\" in an interface file, rather than themeName=\"" .. theme .. "\"", 0 ) end
		self.theme = theme
	end

	--[[
		@desc Sets the container's theme based upon it's name
		@return [string] themeName -- the name of the theme
	]]
	set themeName( themeName )
		local oldThemeName = self.themeName
		self.themeName = themeName
		Theme.static.active = Theme.static:named( themeName )
		if oldThemeName then
			self.application.event:handleEvent( ThemeChangedInterfaceEvent( themeName, oldThemeName ) )
		end
	end


	--[[
		@desc Redraws the container and draws it to the screen if neccesary
	]]
	function draw()
		if Quartz then
			if self.needsDraw then
				super()
				self.canvas:drawToScreen( term )
			end
			if self.needsCursorUpdate then
				self:updateCursor()
			end
		else
			local needsDraw, needsCursorUpdate = self.needsDraw, self.needsCursorUpdate
			if needsDraw or needsCursorUpdate then
				if needsCursorUpdate and not self:updateCursor() and not needsDraw then
					-- the cursor didn't change and we don't need to redraw children
					return
				end
				local canvas, screenCanvas = self.canvas, self.screenCanvas
				if needsDraw then
					super()
				end
				canvas:transfer( screenCanvas )
				self.cursor:drawTo( screenCanvas, self.cursorX, self.cursorY )
				screenCanvas:drawToScreen( term )
			end
		end
	end

	--[[
		@desc Redraws the cursor and draws it to the screen
	]]
	function drawCursor()
		local canvas, screenCanvas = self.canvas, self.screenCanvas
		canvas:transfer( screenCanvas )
		self.cursor:drawTo( screenCanvas, self.cursorX, self.cursorY )
		screenCanvas:drawToScreen( term )
	end

	--[[
		@desc Update the container than draw the changes (if any) to the screen
	]]
	function update( ... )
		super( ... )
		self:draw()
	end

	--[[
		@desc Fired when the mouse is released and doesn't hit anything else. Unfocuses the focused view, if any.
		@param [DownMouseEvent] event -- the mouse up event
		@return [boolean] preventPropagation -- prevent anyone else using the event
	]]
	function onMouseDownAfter( DownMouseEvent event, Event.phases phase )
		local application = self.application
		
		if application:hasFocus() then
			for focus, v in pairs( application.focuses ) do
				 if focus.isFocusDismissable then
					application:unfocus( focus )
				 end
			end
		end
	end

	--	   self:event( MoveMouseEvent, self.onMouseMoveCursor, Event.phases.AFTER )
	-- function onMouseMoveCursor( MoveMouseEvent event, Event.phases phase )
	--	if self.isEnabled then
	--		local cursorStatic = Cursor.static
	--		if self.cursor ~= cursorStatic then
	--			self.cursor = cursorStatic
	--			return true
	--		end
	--	end
	-- end

	--[[
		Reach in to the child Views and find the lowest level view under the cursor that specifies a cursor
	]]
	function updateCursor()
		local function search( container, x, y, cursor )
			local children = container.children
			for i = #children, 1, -1 do
				local childView = children[i]
				if childView:hitTest( x, y ) then
					local cursor
					if childView:typeOf( Container ) then
						cursor = search( childView, x - childView.x + 1, y - childView.y + 1 )
					else
						cursor = childView.cursor
					end
					if cursor then
						return cursor
					end
				end
			end
			cursor = cursor or container.cursor
			if cursor then
				return cursor
			end
		end

		local oldCursor = self.cursor
		local newCursor = search( self, self.cursorX, self.cursorY, Cursor.static )
		local didChange = false
		if newCursor ~= oldCursor or newCursor.hasUpdatedApperance then
			didChange = true
			newCursor.hasUpdatedApperance = false
			if newCursor ~= oldCursor then
				self.cursor = newCursor
			end
			if Quartz then
				local image = newCursor.image
				local bridgeKeys = BridgedCursor.bridgeKeys
				Quartz.cursor = {
					[bridgeKeys.HOT_SPOT_X] = newCursor.hotSpotX;
					[bridgeKeys.HOT_SPOT_Y] = newCursor.hotSpotY;
					[bridgeKeys.PIXELS] = image.pixels;
					[bridgeKeys.WIDTH] = image.width;
					[bridgeKeys.HEIGHT] = image.height;
				}
			end
		end
		self.needsCursorUpdate = false
		return didChange
	end

	function onMouseMoveCursorBefore( MoveMouseEvent event, Event.phases phase )
		self.cursorX = event.x
		self.cursorY = event.y
		self.needsCursorUpdate = true
		if not Quartz then
			self:drawCursor()
		end
	end

	function dispose()
		super()
		self.application:clearFocus()
	end

	get isVisible()
		return self.isVisible -- View requires having a parent to be visible, but we never have a parent
	end

	set needsDraw( needsDraw )
		self.needsDraw = needsDraw -- View passed needsDraw to parent, but we never have a aprent
	end

end