local w, h = term.getSize()

class ApplicationContainer extends Container {

	-- TODO: make this use a Constraint
	width = Number( w );
	height = Number( h );
	themeName = String( "default" );

	cursorX = Number( 6 );
	cursorY = Number( 6 );
	cursor = Cursor( Cursor.static ).allowsNil;
	needsCursorUpdate = Boolean( true );
	screenCanvas = ScreenCanvas;

}

--[[
	@constructo
	@desc Initialise a application container instance
	@param [table] properties -- the properties for the view
]]
function ApplicationContainer:initialise( ... )
	self:super( ... )
    self:event( MouseDownEvent, self.onMouseDownAfter, Event.phases.AFTER )
    self:event( MouseMoveEvent, self.onMouseMoveCursorBefore )
end

function ApplicationContainer:initialiseCanvas()
	self:super()
	self.screenCanvas = ScreenCanvas( self.width, self.height, self )
end

function ApplicationContainer.theme:set( theme )
	if type( theme ) == "string" then error( "To the set the theme of an ApplicationContainer using a string, use the property 'themeName', rather than 'theme'. Most likely cause: you have use theme=\"" .. theme .. "\" in an interface file, rather than themeName=\"" .. theme .. "\"", 0 ) end
	self.theme = theme
end

--[[
	@desc Sets the container's theme based upon it's name
	@return [string] themeName -- the name of the theme
]]
function ApplicationContainer.themeName:set( themeName )
	local oldThemeName = self.themeName
	self.themeName = themeName
	Theme.static.active = Theme.static:named( themeName )
	if oldThemeName then
		self.application.event:handleEvent( ThemeChangedInterfaceEvent( themeName, oldThemeName ) )
	end
end


--[[
	@desc Redraws the container and draws it to the screen if neccesary
]]
function ApplicationContainer:draw()
	local needsDraw, needsCursorUpdate = self.needsDraw, (self.needsCursorUpdate and not Quartz)
	if needsDraw or needsCursorUpdate then
		if needsCursorUpdate and not self:updateCursor() and not needsDraw then
			-- the cursor didn't change and we don't need to redraw children
			return
		end
		local canvas, screenCanvas = self.canvas, self.screenCanvas
		if needsDraw then
			self:super()
		end
		canvas:transfer( screenCanvas )
		self.cursor:drawTo( screenCanvas, self.cursorX, self.cursorY )
		screenCanvas:drawToScreen( term )
	end
end

--[[
	@desc Redraws the cursor and draws it to the screen
]]
function ApplicationContainer:drawCursor()
	if not Quartz then
		local canvas, screenCanvas = self.canvas, self.screenCanvas
		canvas:transfer( screenCanvas )
		self.cursor:drawTo( screenCanvas, self.cursorX, self.cursorY )
		screenCanvas:drawToScreen( term )
	end
end

--[[
	@desc Update the container than draw the changes (if any) to the screen
]]
function ApplicationContainer:update( ... )
	self:super( ... )
	self:draw()
end

--[[
    @desc Fired when the mouse is released and doesn't hit anything else. Unfocuses the focused view, if any.
    @param [MouseDownEvent] event -- the mouse up event
    @return [boolean] preventPropagation -- prevent anyone else using the event
]]
function ApplicationContainer:onMouseDownAfter( MouseDownEvent event, Event.phases phase )
	local application = self.application
	
	if application:hasFocus() then
		for focus, v in pairs( application.focuses ) do
			 if focus.isFocusDismissable then
			 	application:unfocus( focus )
			 end
		end
	end
end

--     self:event( MouseMoveEvent, self.onMouseMoveCursor, Event.phases.AFTER )
-- function ApplicationContainer:onMouseMoveCursor( MouseMoveEvent event, Event.phases phase )
-- 	if self.isEnabled then
-- 		local cursorStatic = Cursor.static
-- 		if self.cursor ~= cursorStatic then
-- 			self.cursor = cursorStatic
-- 			return true
-- 		end
-- 	end
-- end

--[[
	Reach in to the child Views and find the lowest level view under the cursor that specifies a cursor
]]
function ApplicationContainer:updateCursor()
	local function search( container, x, y, cursor )
		local children = container.children
		for i = #children, 1, -1 do
			local childView = children[i]
			if childView:hitTest( x, y ) then
				local cursor
				if childView:typeOf( Container ) then
					cursor = search( childView, x - childView.x + 1, y - childView.y + 1 )
				else
					cursor = childView.cursor
				end
				if cursor then
					return cursor
				end
			end
		end
		cursor = cursor or container.cursor
		if cursor then
			return cursor
		end
	end

	local oldCursor = self.cursor
	local newCursor = search( self, self.cursorX, self.cursorY, Cursor.static )
	if newCursor ~= oldCursor then
		self.cursor = newCursor
	end
	self.needsCursorUpdate = false
	return newCursor ~= oldCursor
end

function ApplicationContainer:onMouseMoveCursorBefore( MouseMoveEvent event, Event.phases phase )
	self.cursorX = event.x
	self.cursorY = event.y
	self.needsCursorUpdate = true
	self:drawCursor()
end

function ApplicationContainer:dispose()
	self:super()
	self.application:clearFocus()
end

function ApplicationContainer.isVisible:get()
	return self.isVisible -- View requires having a parent to be visible, but we never have a parent
end

function ApplicationContainer.needsDraw:set( needsDraw )
	self.needsDraw = needsDraw -- View passed needsDraw to parent, but we never have a aprent
end