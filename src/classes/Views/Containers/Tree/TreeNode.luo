class TreeNode extends LayoutContainer implements ITreeChild implements IDragDropDestination 
	
	property String text
	property Boolean isPressed = false
	property Boolean isFolded = false
	property Number allowsNil minHeight
	property Number allowsNil maxHeight

	property Boolean canRearrange = true
	property Number allowsNil removingIndex
	property Boolean canRemove = true
	property DragDropManager dropStyles RETURN dropStyle


	function initialise( ... )
		super( ... )

		self:event( MouseDownEvent, self.onMouseDown )
		self.event:connectGlobal( MouseUpEvent, self.onGlobalMouseUp, Event.phases.BEFORE )
		-- self:event( MouseHeldEvent, self.onMouseHeld )
	    self:event( MouseEnteredInterfaceEvent, self.onMouseEnteredOrMoved )
	    self:event( MouseMoveEvent, self.onMouseEnteredOrMoved )
	end

	function onDraw()
		local width, theme, canvas, font = self.width, self.theme, self.canvas
		local font, leftMargin, rightMargin, topMargin, bottomMargin = theme:value( "font" ), theme:value( "leftMargin" ), theme:value( "rightMargin" ), theme:value( "topMargin" ), theme:value( "bottomMargin" )
		local height = topMargin + font.height + bottomMargin

		canvas:fill( theme:value( "textColour" ),  TextMask( leftMargin + 1, topMargin + 1, width - leftMargin - rightMargin, height - topMargin - bottomMargin, self.text, font ) )

		local symbol = theme:value( "symbol" )
	    canvas:fill( theme:value( "symbolColour" ), SymbolMask( 1 + theme:value( "leftSymbolMargin" ), 1 + math.floor( ( height - symbol.height ) / 2 ), symbol ) )
	end

	set text( text )
		self.text = text
		self.needsDraw = true
	end

	function updateThemeStyle()
		local theme = self.theme
		theme.style = self.isEnabled and ( self.isFolded and ( self.isPressed and "foldedPressed" or "folded" ) or ( self.isPressed and "pressed" or "default" ) ) or "disabled"
		self.minHeight = theme:value( "topMargin" ) + theme:value( "font" ).height + theme:value( "bottomMargin" )
		self.needsLayoutUpdate = true
	end

	set isEnabled( isEnabled )
		self.isEnabled = isEnabled
		self:updateThemeStyle()
	end

	set isPressed( isPressed )
		self.isPressed = isPressed
		self:updateThemeStyle()
	end

	local clickableCursor, cursor = ClickableCursor.static, Cursor.static
	function onMouseEnteredOrMoved( Event event, Event.phases phase )
		local currentCursor = self.cursor
		local newCursor = cursor
		if event.y <= self.minHeight then
			newCursor = clickableCursor
		end
		if currentCursor ~= newCursor then
			self.cursor = newCursor
		end
	end

	-- function onMouseHeld( MouseHeldEvent event, Event.phases phase )
	-- 	if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT and self.parent.canRearrange then
	-- 		self.isPressed = true
	-- 		self:startDragDrop( event, ListClipboardData( self ), true, function()self.isPressed = false end )
	-- 	end
	-- 	return true
	-- end

	function onGlobalMouseUp( MouseUpEvent event, Event.phases phase )
		if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then
			self.isPressed = false
			if self.isEnabled and self:hitTestEvent( event ) then
				self.isFolded = not self.isFolded
				self.event:handleEvent( ActionInterfaceEvent( self ) )
				local result = self.event:handleEvent( event )
				return result == nil and true or result
			end
			return true
		end
	end

	set isFolded( isFolded )
	    self.isFolded = isFolded
		self:updateThemeStyle()
	    local height = isFolded and self.minHeight or self.maxHeight
	    if height then
		    local theme = self.theme
			self:animate( "height", height, theme:value( "animationDuration" ), nil, theme:value( "animationEasing" ) )
		end
		local parent = self.parent
		if parent then
			parent.needsLayoutUpdate = true
		end
	end

	set needsLayoutUpdate( needsLayoutUpdate )
	    self.needsLayoutUpdate = needsLayoutUpdate
		local parent = self.parent
		if parent then
			parent.needsLayoutUpdate = true
		end
	end

	function onMouseDown( MouseDownEvent event, Event.phases phase )
		if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then
			local theme = self.theme
			if event.y <= self.minHeight then
				self.isPressed = not self.isPressed
				return true
			end
		end
	end

	function canAcceptDragDrop( ClipboardData data, Boolean isMove )
		return self.canRearrange and data:typeOf( TreeClipboardData )
	end

	function dragDropEntered( ClipboardData data, DragView dragView, Number x, Number y )
		if self.canRemove then
			local removingIndex = self.removingIndex
			if removingIndex then
				self:insert( data.treeItem, removingInde )
				self.dontAnimateLayoutUpdate = false
				dragView.cursor = nil
			end

			self.removingIndex = nil
		end
	end

	function dragDropMoved( ClipboardData data, DragView dragView, Number x, Number y )
		if not self.removingIndex then
			local _, selfY = self:getPosition()
			local treeItem = data.treeItem
			local children = self.children
			local index = math.max( math.min( math.floor( ( dragView.y - selfY - self.minHeight - self.theme:value( "childrenMarginTop" ) ) / treeItem.height + 1.5 ), #children), 1 )
			if treeItem.index ~= index then
				treeItem.index = index
				self.needsLayoutUpdate = true
			end
		end
	end

	function dragDropExited( ClipboardData data, DragView dragView, Number x, Number y )
		if self.canRemove then
			self.removingIndex = dragView.index
			self:remove( data.treeItem )
			dragView.cursor = DeleteCursor.static
		end
	end

	function dragDropDropped( ClipboardData data, Boolean isMove, Number x, Number y )
	end

	function onChildAdded( ChildAddedInterfaceEvent event, Event.phases phase )
		if not event.childView:typeOf( ITreeChild ) then
			error( "Attempted to add view '" .. tostring( event.childView ) .. "' that does not extend ITreeChild to '" .. tostring( self ) .. "'", 0 )
		end
		self.needsLayoutUpdate = true
		self.dontAnimateLayoutUpdate = true
	end

	set width( width )
	    super:super( width )
		local childrenMarginLeft = self.theme:value( "childrenMarginLeft" )
		for i, childView in ipairs( self.children ) do
			childView.width = width - childrenMarginLeft
		end
	end

	set height( height )
	    super:super( height )
	end

	function updateLayout( Boolean dontAnimate = self.dontAnimateLayoutUpdate )
		local width, theme = self.width, self.theme
		local childrenMarginLeft = theme:value( "childrenMarginLeft" )
		local childTopMargin, childBottomMargin = theme:value( "childTopMargin" ), theme:value( "childBottomMargin" )
		local y = 1 + self.minHeight + theme:value( "childrenMarginTop" )

		local time, easing
		if not dontAnimate then
			time = theme:value( "animationDuration" )
			easing = theme:value( "animationEasing" )
		end
		for i, childView in ipairs( self.children ) do
			if dontAnimate then
				childView.y = y + childTopMargin
			else
				childView:animate( "y", y + childTopMargin, time, nil, easing )
			end
			childView.x = 1 + childrenMarginLeft
			childView.width = width - childrenMarginLeft
			y = y + ( childView:typeOf( TreeNode ) and ( ( childView.isFolded and childView.minHeight or childView.maxHeight) or 0 ) or childView.height ) + childTopMargin + childBottomMargin
		end

		local maxHeight = y + theme:value( "bottomMargin" ) - 1 + theme:value( "childrenMarginBottom" )
		self.maxHeight = maxHeight
		local height = self.isFolded and self.minHeight or maxHeight
		if dontAnimate then
			self.height = height
		else
			self:animate( "height", height, time, nil, easing )
		end

		self.dontAnimateLayoutUpdate = false
		self.needsLayoutUpdate = false
	end

end