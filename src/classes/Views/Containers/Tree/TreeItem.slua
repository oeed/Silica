
class TreeItem extends View implements ITreeChild {
	
	text = String;
	isSelected = Boolean( false );
	
}

function TreeItem:initialise( ... )
	self:super( ... )

	self:event( MouseDownEvent, self.onMouseDown )
	self.event:connectGlobal( MouseUpEvent, self.onGlobalMouseUp, Event.phases.BEFORE )
	self:event( ThemeChangedInterfaceEvent, self.updateHeight )
	-- self:event( MouseHeldEvent, self.onMouseHeld )
	self:updateHeight()
end

function TreeItem:updateHeight( ThemeChangedInterfaceEvent.allowsNil event, Event.phases.allowsNil phase )
	local theme = self.theme
	self.height = theme:value( "font" ).height + theme:value( "topTextMargin") + theme:value( "bottomTextMargin")
end

function TreeItem:onDraw()
	local width, height, theme, canvas, font = self.width, self.height, self.theme, self.canvas

	local leftMargin, rightMargin, topMargin, bottomMargin = theme:value( "leftMargin" ), theme:value( "rightMargin" ), theme:value( "topMargin" ), theme:value( "bottomMargin" )
	local roundedRectangleMask = RoundedRectangleMask( 1 + leftMargin, 1 + topMargin, width - leftMargin - rightMargin, height - topMargin - bottomMargin, theme:value( "cornerRadius" ) )
	canvas:fill( theme:value( "fillColour" ), roundedRectangleMask )

	local leftTextMargin, rightTextMargin, topTextMargin, bottomTextMargin = theme:value( "leftTextMargin" ), theme:value( "rightTextMargin" ), theme:value( "topTextMargin" ), theme:value( "bottomTextMargin" )
	canvas:fill( theme:value( "textColour" ),  TextMask( leftTextMargin + 1, topTextMargin + 1, width - leftTextMargin - rightTextMargin, height - topTextMargin - bottomTextMargin, self.text, theme:value( "font" ) ) )
end

function TreeItem.text:set( text )
	self.text = text
	self.needsDraw = true
end

function TreeItem:updateThemeStyle()
	self.theme.style = self.isEnabled and ( self.isSelected and "selected" or "default" ) or "disabled"
end

function TreeItem.isEnabled:set( isEnabled )
	self.isEnabled = isEnabled
	self:updateThemeStyle()
end

function TreeItem.isSelected:set( isSelected )
	self.isSelected = isSelected
	self:updateThemeStyle()
end

-- function TreeItem:onMouseHeld( MouseHeldEvent event, Event.phases phase )
-- 	if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT and self.parent.canRearrange then
-- 		self.isSelected = true
-- 		-- self:startDragDrop( event, ListClipboardData( self ), true, function()self.isSelected = false end )
-- 	end
-- 	return true
-- end

function TreeItem:onGlobalMouseUp( MouseUpEvent event, Event.phases phase )
	if self.isSelected and event.mouseButton == MouseEvent.mouseButtons.LEFT then
		self.isSelected = false
		if self.isEnabled and self:hitTestEvent( event ) then
			self.event:handleEvent( ActionInterfaceEvent( self ) )
			local result = self.event:handleEvent( event )
			return result == nil and true or result
		end
		return true
	end
end

function TreeItem:onMouseDown( MouseDownEvent event, Event.phases phase )
	if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then
		self.isSelected = not self.isSelected
	end
	return true
end