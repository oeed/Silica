-- TODO: scrolling quickly then the opposite way reverses speed (not stops it)


local exp = math.exp

local SCROLL_DECAY = -8
local SCROLL_SPEED = 180
local SCROLL_ACCELERATION = 1.2--0.97
local SPEED_CUTOFF = 0.2

class ScrollView extends Container {

	contents = false;
	horizontalScrollbar = false;
	verticalScrollbar = false;
	container = false;
	verticalVelocityTime = 0;
	verticalVelocity = 0;
	horizontalVelocity = 0;

}

--[[
	@constructor
	@desc Initialise a application container instance
	@param [table] properties -- the properties for the view
]]
function ScrollView:initialise( ... )
	self:super( ... )

	local width, height = self.width, self.height
	self.verticalScrollbar = self:insert( Scrollbar( { isHorizontal = false, x = width - Scrollbar.width + 1, height = height } ) )
	self.container = self:insert( ScrollContainer( { x = 1, y = 1, width = width, height = height } ) )
	-- self:sendToFront( self.horizontalScrollbar )
	self:sendToFront( self.verticalScrollbar )

	self:event( LoadedInterfaceEvent, self.onInterfaceLoaded )
	self:event( MouseScrollEvent, self.onMouseScroll )
end

function ScrollView:initialiseCanvas()
	self:super()

	self.theme:connect( self.canvas, "fillColour" )
end

function ScrollView:onInterfaceLoaded( LoadedInterfaceEvent event, Event.phases phase )
	local currentContainer = self.container
	for i, childView in ipairs( self.children ) do
		if childView ~= currentContainer and childView:typeOf( ScrollContainer ) then
			childView.x = 1
			childView.y = 1
			self:remove( currentContainer )
			self.container = childView
			-- self:sendToFront( self.horizontalScrollbar )
			self.verticalScrollbar:getScroller()
			self:sendToFront( self.verticalScrollbar )
			break
		end
	end
end

function ScrollView:updateContainerSize()
	local container = self.container
	-- if container.width > self.width then
	-- else
	-- end

	if container.height > self.height then
		if not self.verticalScrollbar then
			self.verticalScrollbar = self:insert( Scrollbar( { isHorizontal = false, x = self.width - Scrollbar.width + 1, height = self.height } ) )
		end
	else
		self:remove( self.verticalScrollbar )
	end
end

function ScrollView:updateWidth( width )
	width = self.width
	local verticalScrollbar = self.verticalScrollbar
	if verticalScrollbar then verticalScrollbar.x = width - verticalScrollbar.width + 1 end
end

function ScrollView:updateHeight( height )
	height = self.height
	local verticalScrollbar = self.verticalScrollbar
	if verticalScrollbar then self.verticalScrollbar.height = height end
end

--[[
	@desc Set vertical scroll offset of the contents
	@param [number] offsetY -- the vertical offset
]]
function ScrollView:setOffsetY( offsetY, isVelocity )
	local container = self.container
	if container then
		local height = self.height
		local currentOffsetY = self.offsetY
		local realOffsetY = math.max( math.min( offsetY, math.max( container.height - height, 0 ) ), 0 )
		self.raw.offsetY = realOffsetY
		local verticalScrollbar = self.verticalScrollbar
		if verticalScrollbar then verticalScrollbar:getScroller() end
		if realOffsetY ~= offsetY then
			self.verticalVelocity = 0
			self.verticalVelocityTime = 0
		end
		container.y = 1 - math.floor( realOffsetY + 0.5 )
	end
end


function ScrollView:update( deltaTime )
	self:super( deltaTime )
	local verticalVelocity = self.verticalVelocity
	if verticalVelocity ~= 0 then
		local startTime
		local time = self.verticalVelocityTime
		local newVerticalVelocity = verticalVelocity * exp( SCROLL_DECAY * (time + deltaTime) )
		local distance
		if math.abs( newVerticalVelocity ) <= SPEED_CUTOFF then
			self.verticalVelocity = 0
			self.verticalVelocityTime = 0
		else
			self.verticalVelocityTime = time + deltaTime
			local currentVerticalVelocity = verticalVelocity * exp( SCROLL_DECAY * time )
			self:setOffsetY( self.offsetY + (currentVerticalVelocity - newVerticalVelocity) / SCROLL_DECAY, true )
		end
	end
end

--[[
	@desc Scrolls the scroll view to the offset given, animating the value
	@param [number] offsetY -- the direction/distance to scroll
]]
function ScrollView:scrollTo( offsetY )
	-- calculate the velocity required to reach a certain point
	-- see https://www.desmos.com/calculator/qis3qhbsvs for details
	-- d = vi / a * ( 1 - e ^ ln( vf / vi ) )

	-- it turns out that this is far easier than oeed first thought, having spent many, many hours playing with integrals...
	-- it's simply: vi = a * d + vf
	-- hence: (vi - vf)/a = d
	local deltaOffsetY = offsetY - self.offsetY
	local velocity = SCROLL_DECAY * deltaOffsetY + SPEED_CUTOFF
	self.verticalVelocity = velocity
	self.verticalVelocityTime = 0
	-- self.offsetY = self.offsetY + direction
	-- TODO: horizontal scrolling
end

--[[
	@desc Fired when the mouse is scrolled over the scroll view
	@param [Event] event -- the mouse scroll event
	@return [boolean] preventPropagation -- prevent anyone else using the event
]]
function ScrollView:onMouseScroll( MouseScrollEvent event, Event.phases phase )
	if self.isEnabled then
		local direction = event.direction
		local verticalVelocity = self.verticalVelocity
		instantaneousVelocity = verticalVelocity and verticalVelocity * exp( SCROLL_DECAY * (self.verticalVelocityTime or 0) ) or 0
		self.verticalVelocityTime = 0
		if direction * verticalVelocity > 1 then
			self.verticalVelocity = -direction * math.abs(instantaneousVelocity + direction * SCROLL_SPEED) ^ SCROLL_ACCELERATION
		else
			self.verticalVelocity = -direction * SCROLL_SPEED
		end
		-- self:scroll( event.direction * SCROLL_SPEED )
	end
	return true
end
