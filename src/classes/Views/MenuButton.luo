
local SHADOW_RATIO = Canvas.shadows.SHADOW_RATIO

class MenuButton extends Button 

	property Number width = 45

	property Menu menu
	property String menuName

	property Boolean allowsNil isActive -- TODO: isReadOnly

}

--[[
	@desc Creates a MenuButton object and connects the event handlers
]]
	function initialise( ... )
		super( ... )

		self:event( MenuChangedInterfaceEvent, self.onMenuChanged )
		self:event( ParentChangedInterfaceEvent, self.onParentChanged )
		self:event( LoadedInterfaceEvent, self.onLoaded )
	end

	function onDraw()
		super()
		local theme = self.theme
		local defaultShadowSize = theme:value( "shadowSize", "default" )
		local shadowPressedSize = theme:value( "shadowSize", "pressed" )
		local shadowSize = theme:value( "shadowSize" )
		local shadowOffset = defaultShadowSize - shadowSize
		local shadowPressedOffset = defaultShadowSize - shadowPressedSize
		local shadowX = math.floor( shadowOffset * SHADOW_RATIO + 0.5 )

		local topMargin, arrowMargin = theme:value( "topMargin" ), theme:value( "arrowMargin" )
		local symbol = theme:value( "arrowSymbol" )
		self.canvas:fill( theme:value( "arrowColour" ), SymbolMask( self.width - arrowMargin - symbol.width + shadowX, 1 + math.floor( ( self.height - symbol.height ) / 2 ) + shadowOffset, symbol ) )
	end

	function onLoaded( LoadedInterfaceEvent event, Event.phases phase  )
		local menuName = self.menuName
		if not menuName then
			MenuNotSpecifiedException( "A MenuButton did not specifiy the property 'menuName'. MenuButtons must specify this property as it indicates what inteface file to load the menu from.", 0 )
		end
		menu = Menu.static:fromInterface( menuName )
		menu.owner = self
		menu.isSingleShot = false
		menu.isVisible = false
		menu.hitTestOwner = true
		local theme =self.theme
		menu.x = self.x + theme:value( "menuOffsetX" )
		menu.y = self.y + theme:value( "menuOffsetY" )
		self.menu = menu
		self.parent:insert( menu )
	end

	function onParentChanged( ParentChangedInterfaceEvent event, Event.phases phase )
		local menu = self.menu
		if menu then
			if menu.parent then
				menu.parent:removeChild( menu )
			end
			menu.x = self.x - 5
			menu.y = self.y + 7
			self.parent:insert( menu )
		end
	end

	set width( width )
		super( width )
		local menu = self.menu
		if menu then
			menu.width = width
		end
	end

	set x( x )
		super( x )
		local menu = self.menu
		if menu then
			menu.x = x + self.theme:value( "menuOffsetX" )
		end
	end

	set y( y )
		super( y )
		local menu = self.menu
		if menu then
			menu.y = y + self.theme:value( "menuOffsetY" )
		end
	end
	 
	--[[
		@desc Whether the button is pressed or open
		@return [boolean] isActive -- whether the button is active
	]]
	function MenuButton.isActive:get()
		if self.isPressed then
			return true
		end
		local menu = self.menu
		return menu and menu.isOpen or false
	end

	function updateThemeStyle()
		self.theme.style = self.isEnabled and ( self.isPressed and "pressed" or ( self.isActive and "active" or "default" ) ) or "disabled"
	end

	--[[
		@desc Fired when the mouse is released while over the button. Toggles the menu if it hit tests.
		@param [Event] event -- the mouse up event
	]]
	function onGlobalMouseUp( Event event, Event.phases phase )
		if self.isEnabled and self.isPressed then
			self.isPressed = false
			if self:hitTestEvent( event ) then
				self.menu:toggle()
				return self.event:handleEvent( event )
			end
		end
	end

	--[[
		@desc Fired when the menu opens or closes
		@param [Event] event -- the menu changed event
		@return [boolean] preventPropagation -- prevent anyone else using the event
	]]
	function onMenuChanged( MenuChangedInterfaceEvent event, Event.phases phase )
		self:updateThemeStyle()

		if self.menu.isOpen then
			local parent = self.parent
			parent:sendToFront( self.menu )
			parent:sendToFront( self )
		end
		return true
	end
end