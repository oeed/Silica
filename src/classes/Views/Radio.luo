
class Radio extends View 

	property Number width = 8
	property Number height = 8

	property Boolean isPressed = false
	property Boolean isEnabled = true
	property Boolean isChecked = false


	function initialise( ... )
		super( ... )

		self:event( ParentChangedInterfaceEvent, self.onParentChanged )
		self:event( MouseDownEvent, self.onMouseDown )
		self.event:connectGlobal( MouseUpEvent, self.onGlobalMouseUp, Event.phases.BEFORE )
	end

	function onDraw()
		local width, height, theme, canvas = self.width, self.height, self.theme, self.canvas

		local roundedRectangle = RoundedRectangleMask( 1, 1, width, height, theme:value( "cornerRadius" ) )
		canvas:fill( theme:value( "fillColour" ), roundedRectangle )
		canvas:outline( theme:value( "outlineColour" ), roundedRectangle, theme:value( "outlineThickness" ) )
	end

	--[[
		@desc Sets the checked state of the radio button. Sets all other sibling (in the same container) radios to false if being set to true
		@param [boolean] isChecked -- the new checked state
	]]
	set isChecked( isChecked )
		self.isChecked = isChecked
		if isChecked then
			for i, sibling in ipairs( self:siblingsOfType( Radio ) ) do
				sibling.isChecked = false
			end
		end
		self.event:handleEvent( ActionInterfaceEvent( self ) )
		self:updateThemeStyle()
	end


	function updateThemeStyle()
		self.theme.style = self.isEnabled and ( self.isPressed and "pressed" or (self.isChecked and "checked" or "default" ) ) or ( self.isChecked and "disabledChecked" or "disabled" )
	end

	set isEnabled( isEnabled )
		self.isEnabled = isEnabled
		self:updateThemeStyle()
	end

	set isPressed( isPressed )
		self.isPressed = isPressed
		self:updateThemeStyle()
	end

	function onParentChanged( ParentChangedInterfaceEvent event, Event.phases phase )
		local siblings = self:siblingsOfType( Radio )
		if #siblings == 0 or self.isChecked then
			self.isChecked = true -- if we're the first child or we're being added check ourself to ensure there's at least one and interface properties are respected
		end
	end

	--[[
		@desc Fired when the mouse is released anywhere on screen. Removes the pressed appearance.
		@param [Event] event -- the mouse up event
		@return [boolean] preventPropagation -- prevent anyone else using the event
	]]
	function onGlobalMouseUp( MouseUpEvent event, Event.phases phase )
		if self.isPressed and event.mouseButton == MouseEvent.mouseButtons.LEFT then
			self.isPressed = false
			if self:hitTestEvent( event ) then
				self.isChecked = true
				return self.event:handleEvent( event )
			end
		end
	end

	--[[
		@desc Fired when the mouse is released anywhere on screen. Removes the pressed appearance.
		@param [Event] event -- the mouse up event
		@return [boolean] preventPropagation -- prevent anyone else using the event
	]]
	function onMouseDown( MouseDownEvent event, Event.phases phase )
		if self.isEnabled and event.mouseButton == MouseEvent.mouseButtons.LEFT then
			self.isPressed = true
		end
		return true
	end

end