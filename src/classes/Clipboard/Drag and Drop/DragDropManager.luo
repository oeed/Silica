local SHADOW_RATIO = 2/3
local MAX_SHADOW_SIZE = 3

class DragDropManager
	
	property Application owner
	property DragView allowsNil dragView
	property ClipboardData allowsNil data
	property Number allowsNil relativeX
	property Number allowsNil relativeY
	property View allowsNil destination
	property Boolean allowsNil isMove
	property Table allowsNil sourceViews
		property function allowsNil completion

		enum Number dropStyles = {
			DISAPPEAR = 0;
			SHRINK = 1;
			RETURN = 2;
		}

	}

	--[[
		@desc Creates a drag and drop manager
		@param [Application] owner -- the manager owner
	]]
	function initialise( owner )
		self.owner = owner
		owner:event( MouseDragEvent, self.onMouseDrag, nil, nil, self )
		owner:event( MouseUpEvent, self.onMouseUp, nil, nil, self )
	end

	--[[
		@desc Starts a drag and drop proccess
		@param [Table{View}] views -- the view being dragged
		@param [ClipboardData] data -- the data that will be given to the destination
		@param [number] relativeX -- the x coordinate relative to view the mouse is located
		@param [number] relativeY -- the x coordinate relative to view the mouse is located
		@param [boolean] isMove -- whether the source view should be hidden during dragging
		@param [function] completion -- called when the drag and drop is cancelled or successful (destination view passed if dropped, nil if cancelled)
	]]
	function start( Table views, ClipboardData data, Number relativeX, Number relativeY, Boolean isMove = true, function.allowsNil completion )
		local x, y, x2, y2 = self.owner.container.width, self.owner.container.height, 1, 1
		local images = {}
		for i, view in ipairs( views ) do
			if not view:typeOf( IDraggableView ) then
				error( "Drag and drop can only be used on Views the implement IDraggableView.", 4 )
			end

			local viewX, viewY = view:getPosition()
			local viewWidth, viewHeight = view.width, view.height
			x = math.min( x, viewX )
			y = math.min( y, viewY )
			x2 = math.max( x2, viewX + viewWidth - 1 )
			y2 = math.max( y2, viewY + viewHeight - 1 )
			table.insert( images, { viewX, viewY, view.canvas:toImage(), view.shadowMask } )

			if isMove then
				view.isVisible = false
			end
		end

		local width, height = x2 - x + 1, y2 - y + 1
		local image = Image.static:blank( width, height )
		local shadowMask = Mask( 1, 1, width, height )
		for i, imageData in ipairs( images ) do
			local _x, _y = imageData[1] - x + 1, imageData[2] - y + 1
			image:appendImage( imageData[3], _x, _y )
			shadowMask = shadowMask:add( imageData[4], _x, _y )
		end

		self:cancel()
		local dragView = DragView( {
			property width width
			property height height
			x = x;
			y = y;
			property image image
			property shadowMask shadowMask
		} )
		self.owner.container:insert( dragView )
		self.dragView = dragView
		self.data = data
		self.relativeX = relativeX - x + 1
		self.relativeY = relativeY - y + 1
		self.isMove = isMove
		self.completion = completion
		self.sourceViews = views
		dragView:animate( "shadowSize", MAX_SHADOW_SIZE, 0.2, nil, Animation.easings.IN_SINE )
	end

	--[[
		@desc Cancels the current drag and drop proccess, if one exists
		@return [boolean] didCancel -- whether a proccess was canceled (i.e. returns true if one existed)
	]]
	function cancel()
		local dragView = self.dragView
		if dragView then
			local time, easing = 0.3, Animation.easings.OUT_SINE
			local isMove, completion = self.isMove, self.completion
			local x, y = dragView.x + self.relativeX - 1, dragView.y + self.relativeY - 1
			local sourceViews, data = self.sourceViews, self.data
			for i, view in ipairs( sourceViews ) do
				view:dragDropCancelled( data, dragView, x, y )
			end
			
			local dragViewParent = dragView.parent
			if dragViewParent then
				local ownerContainer = self.owner.container
				local originalX, originalY = ownerContainer.width, ownerContainer.height
				for i, view in ipairs( sourceViews ) do
					local viewX, viewY = view:getPosition()
					originalX = math.min( originalX, viewX )
					originalY = math.min( originalY, viewY )
				end
				dragView:animate( "x", originalX, time, nil, easing )
				dragView:animate( "y", originalY, time, nil, easing )
				dragView:animate( "shadowSize", 0, time, function()
					for i, view in ipairs( sourceViews ) do
						if isMove then
							view.isVisible = true
						end
					end
					dragView.parent:remove( dragView )
					if completion then completion() end
				end, easing )
			end
			self.dragView = nil
		end
	end

	--[[
		@desc Sets the destination, informing the new and old destinations if they've changed
		@param [IDragDropDestination] destination
	]]

	--[[
		@desc Fired when the mouse is dragged in the application
		@param [MouseDragEvent] event -- the mouse dragged event
		@return [boolean] shouldCancel -- whether other events handlers should not recieve this event
	]]
	function onMouseDrag( Event event, Event.phases phase )
		local dragView = self.dragView
		if dragView then
			dragView.x = event.x - self.relativeX + 1
			dragView.y = event.y - self.relativeY + 1
			self:updateDestination()
			return true
		end
	end

	--[[
		@desc Fired when the mouse is released in the application
		@param [MouseUpEvent] event -- the mouse up event
		@return [boolean] shouldCancel -- whether other events handlers should not recieve this event
	]]
	function onMouseUp( Event event, Event.phases phase )
		local dragView = self.dragView
		if dragView then
			local destination = self.destination
			if not destination then
				self:cancel()
				dragView.x = event.globalX - self.relativeX + 1
				dragView.y = event.globalY - self.relativeY + 1
			else
				local isMove = self.isMove
				local x, y = dragView.x + self.relativeX - 1, dragView.y + self.relativeY - 1
				destination:dragDropDropped( self.data, isMove, x, y )
				local dropStyle = destination.dropStyle
				local dropStyles = DragDropManager.dropStyles
				local function done()
					if isMove then
						for i, view in ipairs( self.sourceViews ) do
							view.isVisible = true
						end
					end
					dragView.parent:remove( dragView )
					local completion = self.completion
					if completion then completion( destination ) end
				end
				if dropStyle == dropStyles.SHRINK then
					local time, easing = 0.2, Animation.easings.OUT_SINE
					dragView:animate( "width", 1, time, done, easing )
					dragView:animate( "height", 1, time, nil, easing )
					dragView:animate( "x", x, time, nil, easing )
					dragView:animate( "y", y, time, nil, easing )
					dragView.shadowSize = 0
				elseif dropStyle == dropStyles.RETURN then
					local time, easing = 0.2, Animation.easings.OUT_SINE
					local originalX, originalY = self.owner.container.width, self.owner.container.height
					for i, view in ipairs( self.sourceViews ) do
						local viewX, viewY = view:getPosition()
						originalX = math.min( originalX, viewX )
						originalY = math.min( originalY, viewY )
					end
					dragView:animate( "x", originalX, time, done, easing )
					dragView:animate( "y", originalY, time, nil, easing )
					dragView:animate( "shadowSize", 0, time, nil, easing )
				else
					done()
				end
				self.dragView = nil
				self.destination = nil
			end
			return true
		end
	end

	--[[
		@desc Finds the lowest level (i.e. the view with most parents above it) view at the current view coordinates that accepts the drag
	]]
	function updateDestination()
		local dragView = self.dragView
		if dragView then
			local ownerContainer = self.owner.container
			local data, isMove = self.data, self.isMove

			local function lookInView( view, x, y )
				if view:typeOf( Container ) then
					local children = view.children
					for i = #children, 1, -1 do
						local childView = children[i]
						if childView:hitTest( x, y ) then
							local destination = lookInView( childView, x - childView.x + 1, y - childView.y + 1 )
							if destination then
								return destination
							end
						end
					end
				end

				if view:typeOf( IDragDropDestination ) and view:canAcceptDragDrop( data, isMove ) then
					return view
				end

				return nil
			end

			local oldDestination = self.destination
			local x, y = dragView.x + self.relativeX - 1, dragView.y + self.relativeY - 1
			local destinationX, destinationY
			local destination = lookInView( ownerContainer, x, y )
			if destination then
				destinationX, destinationY = destination:getCoordinates( x, y )
			end

			if oldDestination ~= destination then
				if oldDestination then
					local oldDestinationX, oldDestinationY = oldDestination:getCoordinates( x, y )
					oldDestination:dragDropExited( self.data, dragView, oldDestinationX, oldDestinationY )
				end
				if destination then
					destination:dragDropEntered( self.data, dragView, destinationX, destinationY )
				end
				self.destination = destination
			end
			if destination then
				destination:dragDropMoved( self.data, dragView, destinationX, destinationY )
			end
		else
			self.destination = nil
		end
	end

end