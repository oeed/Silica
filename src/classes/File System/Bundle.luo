local fs = Quartz and Quartz.fs or fs

local function tidy( path )
	if path == "/" then return path end
	path = path:gsub( "/.-/%.%./", "/" )
			   :gsub( "^.-/%.%./", "" )
			   :gsub( "/%./", "/" )
			   :gsub( "^%.%./", "" )
			   :gsub( "^%.%.$", "" )
			   :gsub( "//+", "/" )
	return path
end

local relativePath = tidy( shell.getRunningProgram():match( "(.*)/.+" ) ):gsub( "[^/]$", "%1/" )
local function resolve( path )
	if not path or #path == 0 then return relativePath else return tidy( path ):gsub( "^[^/]", relativePath .. "%1" ) end
end

local fileCache = FileSystemItem.static.fileCache
local osClock = os.clock

class Bundle extends Folder 
	
	property Table config


	-- TODO: replace this with a static function
	-- function Bundle.metatable:__call( path, ... )
	-- 	path = resolve( path )
	-- 	local cached = fileCache[path]
	-- 	if cached then cached[2] = osClock() return cached[1] end
	-- 	if fs.exists( path ) and fs.isDir( path ) and not fs.isReadOnly( path ) and fs.exists( tidy( path .. "/bundle.sconfig" ) ) then
	-- 		local name = fs.getName( path )
	-- 		if name ~= ".DS_Store" and name ~= ".metadata" then
	-- 			return self.spawn( false, path, ... )
	-- 		end
	-- 	end
	-- end

	set path( path )
		path = resolve( path )
		super( path )

		local configFile = self:find( "bundle", Metadata.mimes.SCONFIG, true )
		if not configFile then
			error( "Bundle is corrupt (no bundle.sconfig or file mime is incorrect)." )
		end

		local config = configFile.serialisedContents
		if not config then
			error( "Bundle is corrupt (bundle.sconfig could not be parsed)." )
		end

		self.config = config
	end

end