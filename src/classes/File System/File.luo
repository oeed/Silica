
local fs = Quartz and Quartz.fs or fs

	local function tidy( path )
		if path == "/" then return path end
		path = path:gsub( "/.-/%.%./", "/" )
				   :gsub( "^.-/%.%./", "" )
				   :gsub( "/%./", "/" )
				   :gsub( "^%.%./", "" )
				   :gsub( "^%.%.$", "" )
				   :gsub( "//+", "/" )
				   :gsub( "/$", "" )
		return path
	end

	local relativePath = tidy( shell.getRunningProgram():match( "(.*)/.+" ) ):gsub( "[^/]$", "%1/" ):gsub( "^[^/]", "/%1" )
	local function resolve( path )
		if not path or #path == 0 then return "/" .. relativePath else local _ = tidy( path ):gsub( "^[^/]", relativePath .. "%1" ) return _ end
	end

	local fileCache = FileSystemItem.static.fileCache
	local osClock = os.clock

	class File extends FileSystemItem implements IEditableFileSystemItem 

		property contents -- the string contents of the file
		property binaryContents -- a table of bytes; the file contents, read and written using the rb/wb mode 
		property serialisedContents -- the texutils.(un)serialised contents of the file. automatically serialises/unserialises each time
		

	function File.metatable:__call( path, ... )
		path = resolve( path )
		local cached = fileCache[path]
		if cached then cached[2] = osClock() return cached[1] end
		if fs.exists( path ) and not fs.isDir( path ) and not fs.isReadOnly( path ) then
			local name = fs.getName( path )
			if name ~= ".DS_Store" and name ~= ".metadata" and name ~= ".git" then
				return self.spawn( false, path, ... )
			end
		end
	end

	static function make( path, mime, overwrite, contents )
		local exists = fs.exists( path )
		if overwrite and exists then
			fs.delete( path )
			exists = false
		end

		if not exists then
			local h = fs.open( path, "w" )
			h.write( contents or "" )
			h.close()
			local file = self.class( path )
			file.metadata.mime = mime
			return file
		else
			local file = File( path )
			if contents then
				file.contents = contents
			end
			return file
		end
	end

	set contents( contents )
		local handle = fs.open( self.path, "w" )
		if handle then
			handle.write( contents )
			handle.close()
		else
			-- TODO: file writting error handling
		end
	end

	set serialisedContents( serialisedContents )
		self.contents = textutils.serialize( serialisedContents )
	end

	set binaryContents( binaryContents )
		if type( binaryContents ) ~= "table" then error( "File.binaryContents must be set with a table of bytes.", 2 ) end
		local handle = fs.open( self.path, "wb" )
		if handle then
			for i, byte in ipairs( binaryContents ) do
				handle.write( byte )
			end
			handle.close()
		else
			-- TODO: file writing error handling
		end
	end

	function File.contents:get()
		local handle = fs.open( self.path, "r" )
		if handle then
			local contents = handle.readAll( contents )
			handle.close()
			return contents
		else
			-- TODO: file reading error handling
		end
	end

	function File.serialisedContents:get()
		return textutils.unserialize( self.contents )
	end

	-- TODO: this is slow af
	function File.binaryContents:get()
		local handle = fs.open( self.path, "rb" )
		if handle then
			local contents = {}
			local read = handle.read
			local lastByte = read()
			local index = 1
			while lastByte do
				contents[index] = lastByte
				lastByte = read()
				index = index + 1
			end 
			handle.close()
			return contents
		else
			-- TODO: file writing error handling
		end
	end
end