
local fs = Quartz and Quartz.fs or fs

	local function tidy( path )
		if path == "/" then return path end
		path = path:gsub( "/.-/%.%./", "/" )
				   :gsub( "^.-/%.%./", "" )
				   :gsub( "/%./", "/" )
				   :gsub( "^%.%./", "" )
				   :gsub( "^%.%.$", "" )
				   :gsub( "//+", "/" )
				   :gsub( "/$", "" )
		return path
	end

	local relativePath = tidy( shell.getRunningProgram():match( "(.*)/.+" ) ):gsub( "[^/]$", "%1/" ):gsub( "^[^/]", "/%1" )
	local function resolve( path )
		if not path or #path == 0 then return "/" .. relativePath else local _ = tidy( path ):gsub( "^[^/]", relativePath .. "%1" ) return _ end
	end

	local fileCache = FileSystemItem.static.fileCache
	local osClock = os.clock

	class Folder extends FileSystemItem 
		
		property Table allowsNil allItems
		property Table allowsNil items
		property Table allowsNil files
		property Table allowsNil folders
		property Table allowsNil fs -- an fs API sandbox 
		property Table allowsNil io -- an io API sandbox 
		property Any allowsNil openIcon


	function Folder.metatable:__call( path, ... )
		path = resolve( path )
		local cached = fileCache[path]
		if cached then cached[2] = osClock() return cached[1] end
		if fs.exists( path ) and fs.isDir( path ) and not fs.isReadOnly( path ) then
			local name = fs.getName( path )
			if name ~= ".DS_Store" and name ~= ".metadata" and name ~= ".git" then
				return self.spawn( false, path, ... )
			end
		end
	end

	static function make( path, overwrite )
		path = resolve( path )
		local exists = fs.exists( path )
		if overwrite and exists then
			fs.delete( path )
			exists = false
		end

		if not exists then
			fs.makeDir( path )
		end
		return Folder( path )
	end

	function serialise( flatten, metadataProperties )
		local allItems = {}

		local path = self.path
		for i, name in ipairs( fs.list( path ) ) do
			local item = FileSystemItem( path .. "/" .. name, self )
			if item then
				local itemName = item.name
				local isFolder = item:typeOf( Folder )
				if not isFolder or not flatten then
					if flatten and allItems[flatten and itemName or name] then
						allItems[flatten and itemName or name][item.metadata.mime] = item.contents
					else
						allItems[flatten and itemName or name] = flatten and {[item.metadata.mime] = item.contents} or { isFolder and {} or item.contents, item.metadata:serialise( metadataProperties ) }
					end
				end
				if isFolder then
					local subItems = item:serialise( flatten, metadataProperties )
					if flatten and not item:typeOf( Bundle ) then
						for k, subItem in pairs( subItems ) do
							-- if flatten then
								allItems[k] = subItem--{ subItem., item.metadata:serialise() }
							-- else
								-- allItems[name][1][subItem.fullName] = { item, item.metadata:serialise() }
							-- end
						end
					else
						allItems[name][1] = subItems
					end
				end
			end
		end

		return allItems
	end

	function Folder.size:get()
		local list, getSize, isDir = fs.list, fs.getSize, fs.isDir
		local function sizeDir( path )
			local size = 0
			for i, fileName in ipairs( list( path ) ) do
				local p = path .. "/" .. fileName
				if isDir( p ) then
					size = size + sizeDir( p )
				else
					size = size + getSize( p )
				end
			end
			return size
		end
		return sizeDir( self.path )
	end

	function Folder.icon:get()
		local cache = self.icon
		if cache then return cache end

		local icon = FolderIcon.static:fromFolder( self )
		self.icon = icon
		return icon
	end

	function Folder.openIcon:get()
		local cache = self.openIcon
		if cache then return cache end

		local openIcon = FolderIcon.static:fromFolder( self, true )
		self.openIcon = openIcon
		return openIcon
	end

	--[[
		@desc Creates a folder within this folder
		@return Folder
	]]
	function makeSubfolder( String path, Boolean( false ) overwrite )
		return Folder.static:make( self.path .. tidy( "/" .. path ), overwrite )
	end

	--[[
		@desc Creates a file within this folder
		@return File
	]]
	function makeSubfile( String path, Metadata.mimes mime, Boolean( false ) overwrite, String.allowsNil contents )
		return File.static:make( self.path .. tidy( "/" .. path ), mime, overwrite, contents )
	end

	function getItems( noFiles, noFolders )
		local items = {}
		local path = self.path
		for i, name in ipairs( fs.list( path ) ) do
			if name ~= ".DS_Store" and name ~= ".metadata" then
				local item = FileSystemItem( path .. "/" .. name, self )
				if not ( noFolders and noFolders ) or ( noFiles and not item:typeOf( IEditableFileSystemItem ) ) or ( noFolders and not item:typeOf( Folder ) ) then
					table.insert( items, item )
				end
			end
		end
		return items
	end

	function Folder.items:get()
		return self:getItems( false, false )
	end

	function Folder.files:get()
		return self:getItems( false, true )
	end

	function Folder.folders:get()
		return self:getItems( true, false )
	end

	set items( items )
		error( "Folder.items is a read-only property.", 2 ) -- TODO: check if 2 is correct error level
	end

	set files( files )
		error( "Folder.files is a read-only property.", 2 ) -- TODO: check if 2 is correct error level
	end

	set folders( folders )
		error( "Folder.folders is a read-only property.", 2 ) -- TODO: check if 2 is correct error level
	end

	function itemFromPath( path )
		return FileSystemItem( self.path .. tidy( "/" .. path ) )
	end

	function fileFromPath( path )
		return File( self.path .. tidy( "/" .. path ) )
	end

	function folderFromPath( path )
		return Folder( self.path .. tidy( "/" .. path ) )
	end

	--[[
		@desc Find an IEditableFileSystemItem that matches the name (without the extension) and the mime type.
		@param [string] name -- the exact name of the file without extension to match
		@param [Metadata.mimes/table{Metadata.mimes}] mimes -- a mime or table of mimes
		@param [boolean] noSubfolders -- whether to not look in subfolders, by default subfolders will be searched
		@return [IEditableFileSystemItem] returnedValue -- description
	]]
	function find( name, mimes, noSubfolders )
		local items = self.items
		local folders = {}
		if type( mimes ) == "string" then mimes = { mimes } end
		for i, fileSystemItem in ipairs( items ) do
			if fileSystemItem:typeOf( IEditableFileSystemItem ) then
				if --[[(]] name == fileSystemItem.name --[[ or name == fileSystemItem.fullName )]] then
					local mime = fileSystemItem.metadata.mime
					for i, _mime in ipairs( mimes ) do
						if _mime == mime then
							return fileSystemItem
						end
					end
				end
			end
			if not noSubfolders and fileSystemItem:typeOf( Folder ) then
				-- look through folders last
				table.insert( folders, fileSystemItem )
			end
		end

		for i, folder in ipairs( folders ) do
			local found = folder:find( name, mimes )
			if found then
				return found
			end
		end
	end

	--[[
		@desc Returns a table of all the FileSystemItems of a certain MIME
	]]
	function findAll( String mime, Boolean( false ) noSubfolders )
		local found = {}
		local n = 1
		for i, fileSystemItem in ipairs( self.items ) do
			if not noSubfolders and fileSystemItem:typeOf( Folder ) then
				for i, item in ipairs( fileSystemItem:findAll( mime ) ) do
					found[n] = item
					n = n + 1
				end
			end
			if fileSystemItem.metadata.mime == mime then
				found[n] = fileSystemItem
				n = n + 1
			end
		end
		return found
	end

	function Folder.fs:get()
		local _fs = self.fs
		if _fs then return _fs end
		_fs = {
			property fs combine combine
			property fs getDir getDir
			property fs getName getName
			property fs getDrive getDrive
		}

		local relativePath = self.path
		local function resolve( path )
			return relativePath .. tidy( "/" .. path )
		end

		local resolvefunctions = { "list"; "exists"; "isDir"; "isReadOnly"; "getSize"; "getFreeSpace"; "makeDir"; "delete"; "open"; "find"; } -- TODO: will find will work
		for i, name in ipairs( resolvefunctions ) do
			local func = fs[name]
			_fs[name] = function ( path, ... )
				path = path and resolve( path ) or path
				return func( path, ... )
			end
		end

		local doubleResolvefunctions = { "copy"; "move"; }
		for i, name in ipairs( doubleResolvefunctions ) do
			local func = fs[name]
			_fs[name] = function ( fromPath, toPath, ... )
				return func( resolve( fromPath ), resolve( toPath ), ... )
			end
		end

		-- function _fs.combine( partial, path, ... )
		--	   return fs.combine( partial, resolve( path), ... )
		-- end

		self.raw.fs = _fs
		return _fs
	end

	set fs( fs )
		error( "Folder.fs is a read-only property.", 2 ) -- TODO: check if 2 is correct error level
	end

	function Folder.io:get()
		local _io = self.io
		if _io then return _io end
		_io = {
			property io input input
			property io output output
			property io type type
			property io close close
			property io write write
			property io flush flush
			property io lines lines
			property io read read
		}

		function _io.open( path, ... )
			return io.open( resolve( path), ... )
		end

		self.raw.io = _io
		return _io
	end

	set io( io )
		error( "Folder.io is a read-only property.", 2 ) -- TODO: check if 2 is correct error level
	end

	function package( path, overwrite, isResourcePackage )
		return Package.static:make( path, overwrite, self, isResourcePackage )
	end

end