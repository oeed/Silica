
class ScreenCanvas extends Canvas 
	
	property Boolean drawsCorners = true
	property Table screenBuffer = {}


	function initialise( ... )
		super( ... )
		self:fill( Graphics.colours.BLACK )
	end

	function drawToScreen( screen )
		if Quartz then
			Quartz:redraw( self.pixels )
		else
			local pixels, width, height, screenBuffer = self.pixels, self.width, self.height, self.screenBuffer
			-- draw the blacked out corners. this could be done using a Mask if the performance isn't too bad (considering it will be called every single draw)
			local corner = { 
				[1] = { [1] = true, [2] = true, [3] = true, [4] = true, [height - 3] = true, [height - 2] = true, [height - 1] = true, [height] = true },
				[2] = { [1] = true, [2] = true, [height - 1] = true, [height] = true },
				[3] = { [1] = true, [height] = true },
				[4] = { [1] = true, [height] = true },
				[width - 3] = { [1] = true, [height] = true },
				[width - 2] = { [1] = true, [height] = true },
				[width - 1] = { [1] = true, [2] = true, [height - 1] = true, [height] = true },
				[width] = { [1] = true, [2] = true, [3] = true, [4] = true, [height - 3] = true, [height - 2] = true, [height - 1] = true, [height] = true },
			}
			local blackColour = Graphics.colours.BLACK
			for x, v in pairs( corner ) do
				for y, v in pairs( v ) do
					pixels[ ( y - 1 ) * width + x ] = blackColour
				end
			end

			local blit = term.blit
			local hexes = { 
				[2^0] = "0",
				[2^1] = "1",
				[2^2] = "2",
				[2^3] = "3",
				[2^4] = "4",
				[2^5] = "5",
				[2^6] = "6",
				[2^7] = "7",
				[2^8] = "8",
				[2^9] = "9",
				[2^10] = "a",
				[2^11] = "b",
				[2^12] = "c",
				[2^13] = "d",
				[2^14] = "e",
				[2^15] = "f"
			}
			local currentLength, currentX, currentY, currentColour

			local sBC, sCP, w = term.setBackgroundColour, term.setCursorPos, term.write
			local function draw()
				if currentLength == 0 then return end
				sBC( currentColour )
				sCP( currentX, currentY )
				w( (" "):rep( currentLength ) )
			end

			for y = 1, self.height do
				currentY = y
				currentLength = 0
				currentColour = nil
				for x = 1, width do
				 local p = ( y - 1 ) * width + x
				 local c = pixels[p] or colour
				 if c ~= screenBuffer[p] then
					 screenBuffer[p] = c
					 if currentColour == c then
						 currentLength = currentLength + 1
					 else
						 draw()
						 currentLength = 1
						 currentX = x
						 currentColour = c
					 end
				 elseif currentLength ~= 0 then
					 draw()
					 currentLength = 0
					 currentColour = nil
				 else
					 currentColour = nil
				 end
				end
				draw()
				-- local changed = false
				-- local str = ""
				-- for x = 1, width do
				--	   local p = ( y - 1 ) * width + x
				--	   local c = pixels[p] or blackColour
				--	   str = str .. hexes[c]
				--	   if not changed and c ~= screenBuffer[p] then
				--		   changed = true
				--	   end
				-- end
				-- if changed then
				--	   term.setCursorPos(1,y)
				--	   blit(str)
				-- end
			end
		end
	end

end