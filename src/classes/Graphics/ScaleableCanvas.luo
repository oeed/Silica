local ceil, floor = math.ceil, math.floor

class ScaleableCanvas extends Canvas 
	
	property Number scaleX = 1
	property Number scaleY = 1


	function initialise( Number width, Number height, View.allowsNil owner )
		self.width = width
		self.height = height
		self.owner = owner
	end

	--[[
		@desc Creates a mask which covers the filled pixels of the canvas
	]]
	function ScaleableCanvas.contentMask:get()
		local scaleX, scaleY = self.scaleX, self.scaleY
		local width, height = self.width, self.height
		local scaledWidth, scaledHeight = floor( width * scaleX + 0.5 ), floor( height * scaleY + 0.5 )
		local widthRatio = width / scaledWidth
		local heightRatio = height / scaledHeight
		local xMin, yMin = floor( ( width - scaledWidth ) / 2 ) + 1, floor( ( height - scaledHeight ) / 2 )

		local pixels, maskPixels = self.pixels, {}
		local TRANSPARENT = Graphics.colours.TRANSPARENT
		for _x = 1, scaledWidth do
			for _y = 0, scaledHeight - 1 do
				local pixelX, pixelY = ceil( _x * widthRatio ), ceil( _y * heightRatio )
				local colour = pixels[pixelY * width + pixelX]
				if colour ~= TRANSPARENT then
					maskPixels[( yMin + _y ) * width + xMin + _x] = true
				end
			end
		end
		return Mask( 1, 1, width, height, maskPixels )
	end

	--[[
		@desc Clears all pixels from the canvas
	]]
	function clear()
		self.pixels = {}
	end

	--[[
		@desc Hit test the current contents of the canvas
		@return Boolean didHit
	]]
	function hitTest( Number x, Number y )
		local scaleX, scaleY = self.scaleX, self.scaleY
		local pixelX, pixelY = x, y
		local width = self.width
		if scaleX ~= 1 or scaleY ~= 1 then
			local height = self.height
			local scaledWidth, scaledHeight = floor( width * scaleX + 0.5 ), floor( height * scaleY + 0.5 )
			local widthRatio = width / scaledWidth
			local heightRatio = height / scaledHeight
			pixelX, pixelY = ceil( x * widthRatio ), ceil( y * heightRatio )
		end
		local colour = self.pixels[ ( pixelY - 1 ) * width + pixelX ]
		return colour and colour ~= Graphics.colours.TRANSPARENT
	end

	--[[
		@desc Draws the canvas to another canvas. If mask is provided the canvas content will be masked (mask pixels will be drawn, pixels not in the mask won't). Mask cordinates are relative to self, not the destination
	]]
	function drawTo( Canvas destinationCanvas, Number x, Number y, Mask.allowsNil mask )
		local scaleX, scaleY = self.scaleX, self.scaleY
		if scaleX == 1 and scaleY == 1 then
			return super( destinationCanvas, x, y, mask )
		end
		local pixels, width, height = self.pixels, self.width, self.height
		local scaledWidth, scaledHeight = floor( width * scaleX + 0.5 ), floor( height * scaleY + 0.5 )
		local widthRatio = width / scaledWidth
		local heightRatio = height / scaledHeight
		local xMin, yMin = floor( ( width - scaledWidth ) / 2 + 0.5 ), floor( ( height - scaledHeight ) / 2 + 0.5 )
		local destinationWidth, destinationHeight, destinationPixels = destinationCanvas.width, destinationCanvas.height, destinationCanvas.pixels
		local TRANSPARENT = Graphics.colours.TRANSPARENT
		local maskX, maskY, maskWidth, maskHeight, maskPixels = mask and mask.x, mask and mask.y, mask and mask.width, mask and mask.height, mask and mask.pixels
		local minX, minY = math.max( 1, x ), math.max( 1, y )
		local maxX, maxY = math.min( destinationWidth, x + width - 1 ), math.min( destinationHeight, y + height - 1 )
		for _x = 0, scaledWidth - 1 do
			for _y = 0, scaledHeight - 1 do
				local pixelX, pixelY = ceil( ( _x + 1 ) * widthRatio ), ceil( _y * heightRatio )
				local destX, destY = x + xMin + _x, y + yMin + _y
				if destX >= minX and destX <= maxX and destY >= minY and destY <= maxY then
					local colour = pixels[pixelY * width + pixelX]
					if colour and colour ~= TRANSPARENT then
						local isOkay = true
						if mask then
							local mx = pixelX - maskX + 1
							local my = pixelY - maskY + 1
							if mx >= 1 and mx <= maskWidth and my >= 1 and my <= maskHeight then
								isOkay = maskPixels[ (my - 1) * maskWidth + mx ]
							else
								isOkay = false
							end
						end
						if isOkay then
							destinationPixels[( destY - 1 ) * destinationWidth + destX] = colour
						end
					end
				end
			end
		end
	end

end